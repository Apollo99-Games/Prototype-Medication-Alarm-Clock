
med clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08004550  08004550  00014550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004688  08004688  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  2000007c  0800470c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  0800470c  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009bd0  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ea6  00000000  00000000  00029cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a38  00000000  00000000  0002bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007d0  00000000  00000000  0002c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016a95  00000000  00000000  0002cd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d103  00000000  00000000  00043805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b19f  00000000  00000000  00050908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002dc0  00000000  00000000  000dbaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000de868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004538 	.word	0x08004538

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08004538 	.word	0x08004538

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <G_SetTime>:
char Line_2[16];

bool update_display = false;


void G_SetTime() {
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
	SetDisplay("Set Time:", TimeInChar);
 8000580:	4902      	ldr	r1, [pc, #8]	; (800058c <G_SetTime+0x10>)
 8000582:	4803      	ldr	r0, [pc, #12]	; (8000590 <G_SetTime+0x14>)
 8000584:	f000 f8a4 	bl	80006d0 <SetDisplay>
}
 8000588:	bf00      	nop
 800058a:	bd80      	pop	{r7, pc}
 800058c:	200001ac 	.word	0x200001ac
 8000590:	08004550 	.word	0x08004550

08000594 <G_SetVolume>:

void G_SetVolume(bool isVol) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (isVol) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d004      	beq.n	80005ae <G_SetVolume+0x1a>
		SetDisplay("Volume is HIGH", "Up/Down>HIGH/LOW");
 80005a4:	4906      	ldr	r1, [pc, #24]	; (80005c0 <G_SetVolume+0x2c>)
 80005a6:	4807      	ldr	r0, [pc, #28]	; (80005c4 <G_SetVolume+0x30>)
 80005a8:	f000 f892 	bl	80006d0 <SetDisplay>
	}
	else {
		SetDisplay("Volume is LOW", "Up/Down>HIGH/LOW");
	}
}
 80005ac:	e003      	b.n	80005b6 <G_SetVolume+0x22>
		SetDisplay("Volume is LOW", "Up/Down>HIGH/LOW");
 80005ae:	4904      	ldr	r1, [pc, #16]	; (80005c0 <G_SetVolume+0x2c>)
 80005b0:	4805      	ldr	r0, [pc, #20]	; (80005c8 <G_SetVolume+0x34>)
 80005b2:	f000 f88d 	bl	80006d0 <SetDisplay>
}
 80005b6:	bf00      	nop
 80005b8:	3708      	adds	r7, #8
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	0800455c 	.word	0x0800455c
 80005c4:	08004570 	.word	0x08004570
 80005c8:	08004580 	.word	0x08004580

080005cc <G_SetBlink>:

void G_SetBlink(int isBlink) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	if (isBlink == 1) {
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d104      	bne.n	80005e4 <G_SetBlink+0x18>
		SetDisplay("Blink is ON", "Up/Down->ON/OFF");
 80005da:	4906      	ldr	r1, [pc, #24]	; (80005f4 <G_SetBlink+0x28>)
 80005dc:	4806      	ldr	r0, [pc, #24]	; (80005f8 <G_SetBlink+0x2c>)
 80005de:	f000 f877 	bl	80006d0 <SetDisplay>
	}
	else {
		SetDisplay("Blink is OFF", "Up/Down->ON/OFF");
	}
}
 80005e2:	e003      	b.n	80005ec <G_SetBlink+0x20>
		SetDisplay("Blink is OFF", "Up/Down->ON/OFF");
 80005e4:	4903      	ldr	r1, [pc, #12]	; (80005f4 <G_SetBlink+0x28>)
 80005e6:	4805      	ldr	r0, [pc, #20]	; (80005fc <G_SetBlink+0x30>)
 80005e8:	f000 f872 	bl	80006d0 <SetDisplay>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08004590 	.word	0x08004590
 80005f8:	080045a0 	.word	0x080045a0
 80005fc:	080045ac 	.word	0x080045ac

08000600 <G_Add_Med>:

void G_Add_Med() {
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	SetDisplay("Click Select To", "Add Alarm");
 8000604:	4902      	ldr	r1, [pc, #8]	; (8000610 <G_Add_Med+0x10>)
 8000606:	4803      	ldr	r0, [pc, #12]	; (8000614 <G_Add_Med+0x14>)
 8000608:	f000 f862 	bl	80006d0 <SetDisplay>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	080045bc 	.word	0x080045bc
 8000614:	080045c8 	.word	0x080045c8

08000618 <G_Display_Med>:

void G_Display_Med(int num, int hours, int minutes) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b08a      	sub	sp, #40	; 0x28
 800061c:	af02      	add	r7, sp, #8
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
	char MedChar[16];
	sprintf(MedChar, "Med %d at %02d:%02d", num, hours, minutes);
 8000624:	f107 0010 	add.w	r0, r7, #16
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	4906      	ldr	r1, [pc, #24]	; (800064c <G_Display_Med+0x34>)
 8000632:	f003 fad5 	bl	8003be0 <siprintf>
	SetDisplay(TimeInChar, MedChar);
 8000636:	f107 0310 	add.w	r3, r7, #16
 800063a:	4619      	mov	r1, r3
 800063c:	4804      	ldr	r0, [pc, #16]	; (8000650 <G_Display_Med+0x38>)
 800063e:	f000 f847 	bl	80006d0 <SetDisplay>
}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	080045d8 	.word	0x080045d8
 8000650:	200001ac 	.word	0x200001ac

08000654 <G_Delete_Med>:

void G_Delete_Med(int num) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	char MedChar[16];
	sprintf(MedChar, "Delete Alarm %d", num);
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	687a      	ldr	r2, [r7, #4]
 8000662:	4907      	ldr	r1, [pc, #28]	; (8000680 <G_Delete_Med+0x2c>)
 8000664:	4618      	mov	r0, r3
 8000666:	f003 fabb 	bl	8003be0 <siprintf>
	SetDisplay("Click Down To", MedChar);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	4619      	mov	r1, r3
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <G_Delete_Med+0x30>)
 8000672:	f000 f82d 	bl	80006d0 <SetDisplay>
}
 8000676:	bf00      	nop
 8000678:	3718      	adds	r7, #24
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	080045ec 	.word	0x080045ec
 8000684:	080045fc 	.word	0x080045fc

08000688 <G_TakeMed>:

void G_TakeMed(int num, int Blink) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
 8000690:	6039      	str	r1, [r7, #0]
	char MedChar[16];
	sprintf(MedChar, "Take Med %d", num);
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	490b      	ldr	r1, [pc, #44]	; (80006c8 <G_TakeMed+0x40>)
 800069a:	4618      	mov	r0, r3
 800069c:	f003 faa0 	bl	8003be0 <siprintf>
	SetDisplay(TimeInChar, MedChar);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	4619      	mov	r1, r3
 80006a6:	4809      	ldr	r0, [pc, #36]	; (80006cc <G_TakeMed+0x44>)
 80006a8:	f000 f812 	bl	80006d0 <SetDisplay>
	if (Blink == 1) {
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d106      	bne.n	80006c0 <G_TakeMed+0x38>
		Display_NoBacklight();
 80006b2:	f000 fd57 	bl	8001164 <Display_NoBacklight>
		HAL_Delay(167);
 80006b6:	20a7      	movs	r0, #167	; 0xa7
 80006b8:	f001 fb3c 	bl	8001d34 <HAL_Delay>
		Display_Backlight();
 80006bc:	f000 fd5e 	bl	800117c <Display_Backlight>
	}
}
 80006c0:	bf00      	nop
 80006c2:	3718      	adds	r7, #24
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	0800460c 	.word	0x0800460c
 80006cc:	200001ac 	.word	0x200001ac

080006d0 <SetDisplay>:

void SetDisplay(const char a[], const char b[]) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	6039      	str	r1, [r7, #0]
	strcpy(Line_1, a);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	4806      	ldr	r0, [pc, #24]	; (80006f8 <SetDisplay+0x28>)
 80006de:	f003 fad3 	bl	8003c88 <strcpy>
	strcpy(Line_2, b);
 80006e2:	6839      	ldr	r1, [r7, #0]
 80006e4:	4805      	ldr	r0, [pc, #20]	; (80006fc <SetDisplay+0x2c>)
 80006e6:	f003 facf 	bl	8003c88 <strcpy>
	Update_Display();
 80006ea:	f000 f809 	bl	8000700 <Update_Display>
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000098 	.word	0x20000098
 80006fc:	200000a8 	.word	0x200000a8

08000700 <Update_Display>:

void Update_Display() {
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
	Display_Clear();
 8000704:	f000 fc66 	bl	8000fd4 <Display_Clear>
	Display_SetCursor(0, 0);
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fc78 	bl	8001000 <Display_SetCursor>
	Display_PrintStr(Line_1);
 8000710:	4807      	ldr	r0, [pc, #28]	; (8000730 <Update_Display+0x30>)
 8000712:	f000 fd12 	bl	800113a <Display_PrintStr>
	Display_SetCursor(0, 1);
 8000716:	2101      	movs	r1, #1
 8000718:	2000      	movs	r0, #0
 800071a:	f000 fc71 	bl	8001000 <Display_SetCursor>
	Display_PrintStr(Line_2);
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <Update_Display+0x34>)
 8000720:	f000 fd0b 	bl	800113a <Display_PrintStr>
	Display_SetCursor(15, 0);
 8000724:	2100      	movs	r1, #0
 8000726:	200f      	movs	r0, #15
 8000728:	f000 fc6a 	bl	8001000 <Display_SetCursor>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000098 	.word	0x20000098
 8000734:	200000a8 	.word	0x200000a8

08000738 <RunSetUp>:
//Button Pressed Variables
bool isSelect;
bool isUp;
bool isDown;

void RunSetUp() {
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	Display_Init(2);
 800073c:	2002      	movs	r0, #2
 800073e:	f000 fbc5 	bl	8000ecc <Display_Init>
	EmptyList();
 8000742:	f000 fb1f 	bl	8000d84 <EmptyList>
	NumOfAlarms = 0;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <RunSetUp+0x5c>)
 8000748:	2200      	movs	r2, #0
 800074a:	601a      	str	r2, [r3, #0]
	SlideNum = 0;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <RunSetUp+0x60>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
	inSetting = false;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <RunSetUp+0x64>)
 8000754:	2200      	movs	r2, #0
 8000756:	701a      	strb	r2, [r3, #0]
	StartUp = true;
 8000758:	4b11      	ldr	r3, [pc, #68]	; (80007a0 <RunSetUp+0x68>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
	AlarmOn = false;
 800075e:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <RunSetUp+0x6c>)
 8000760:	2200      	movs	r2, #0
 8000762:	701a      	strb	r2, [r3, #0]
	startIndex = 0;
 8000764:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <RunSetUp+0x70>)
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
	Block_Toggle = false;
 800076a:	4b10      	ldr	r3, [pc, #64]	; (80007ac <RunSetUp+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
	isLoud = false;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <RunSetUp+0x78>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
	isBlinkON = 0;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <RunSetUp+0x7c>)
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]

	isSelect = false;
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <RunSetUp+0x80>)
 800077e:	2200      	movs	r2, #0
 8000780:	701a      	strb	r2, [r3, #0]
	isUp = false;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <RunSetUp+0x84>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
	isDown = false;
 8000788:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <RunSetUp+0x88>)
 800078a:	2200      	movs	r2, #0
 800078c:	701a      	strb	r2, [r3, #0]

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000100 	.word	0x20000100
 8000798:	20000108 	.word	0x20000108
 800079c:	2000010c 	.word	0x2000010c
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000104 	.word	0x20000104
 80007a8:	20000110 	.word	0x20000110
 80007ac:	2000010d 	.word	0x2000010d
 80007b0:	20000118 	.word	0x20000118
 80007b4:	20000114 	.word	0x20000114
 80007b8:	20000119 	.word	0x20000119
 80007bc:	2000011a 	.word	0x2000011a
 80007c0:	2000011b 	.word	0x2000011b

080007c4 <RunLoop>:

void RunLoop() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0

	isSelect = SelectPressed();
 80007ca:	f001 f867 	bl	800189c <SelectPressed>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	bf14      	ite	ne
 80007d4:	2301      	movne	r3, #1
 80007d6:	2300      	moveq	r3, #0
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4b6c      	ldr	r3, [pc, #432]	; (800098c <RunLoop+0x1c8>)
 80007dc:	701a      	strb	r2, [r3, #0]
	isUp = UpPressed();
 80007de:	f001 f8a7 	bl	8001930 <UpPressed>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	bf14      	ite	ne
 80007e8:	2301      	movne	r3, #1
 80007ea:	2300      	moveq	r3, #0
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b68      	ldr	r3, [pc, #416]	; (8000990 <RunLoop+0x1cc>)
 80007f0:	701a      	strb	r2, [r3, #0]
	isDown = DownPressed();
 80007f2:	f001 f879 	bl	80018e8 <DownPressed>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2da      	uxtb	r2, r3
 8000802:	4b64      	ldr	r3, [pc, #400]	; (8000994 <RunLoop+0x1d0>)
 8000804:	701a      	strb	r2, [r3, #0]

	if (StartUp) {
 8000806:	4b64      	ldr	r3, [pc, #400]	; (8000998 <RunLoop+0x1d4>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d01c      	beq.n	8000848 <RunLoop+0x84>
		toggleCount = 2;
 800080e:	4b63      	ldr	r3, [pc, #396]	; (800099c <RunLoop+0x1d8>)
 8000810:	2202      	movs	r2, #2
 8000812:	601a      	str	r2, [r3, #0]
		ChooseDisplay(startIndex);
 8000814:	4b62      	ldr	r3, [pc, #392]	; (80009a0 <RunLoop+0x1dc>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4618      	mov	r0, r3
 800081a:	f000 f8d7 	bl	80009cc <ChooseDisplay>
		if (isSelect) {
 800081e:	4b5b      	ldr	r3, [pc, #364]	; (800098c <RunLoop+0x1c8>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d004      	beq.n	8000830 <RunLoop+0x6c>
			startIndex++;
 8000826:	4b5e      	ldr	r3, [pc, #376]	; (80009a0 <RunLoop+0x1dc>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	3301      	adds	r3, #1
 800082c:	4a5c      	ldr	r2, [pc, #368]	; (80009a0 <RunLoop+0x1dc>)
 800082e:	6013      	str	r3, [r2, #0]
		}
		if (startIndex == 2) {
 8000830:	4b5b      	ldr	r3, [pc, #364]	; (80009a0 <RunLoop+0x1dc>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b02      	cmp	r3, #2
 8000836:	f040 80a4 	bne.w	8000982 <RunLoop+0x1be>
			StartUp = false;
 800083a:	4b57      	ldr	r3, [pc, #348]	; (8000998 <RunLoop+0x1d4>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
			toggleCount = 1;
 8000840:	4b56      	ldr	r3, [pc, #344]	; (800099c <RunLoop+0x1d8>)
 8000842:	2201      	movs	r2, #1
 8000844:	601a      	str	r2, [r3, #0]
		}
		return;
 8000846:	e09c      	b.n	8000982 <RunLoop+0x1be>
	}

	if (isUp && !inSetting && !AlarmOn) {
 8000848:	4b51      	ldr	r3, [pc, #324]	; (8000990 <RunLoop+0x1cc>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d01f      	beq.n	8000890 <RunLoop+0xcc>
 8000850:	4b54      	ldr	r3, [pc, #336]	; (80009a4 <RunLoop+0x1e0>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	f083 0301 	eor.w	r3, r3, #1
 8000858:	b2db      	uxtb	r3, r3
 800085a:	2b00      	cmp	r3, #0
 800085c:	d018      	beq.n	8000890 <RunLoop+0xcc>
 800085e:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <RunLoop+0x1e4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f083 0301 	eor.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d011      	beq.n	8000890 <RunLoop+0xcc>
		SlideNum++;
 800086c:	4b4f      	ldr	r3, [pc, #316]	; (80009ac <RunLoop+0x1e8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	3301      	adds	r3, #1
 8000872:	4a4e      	ldr	r2, [pc, #312]	; (80009ac <RunLoop+0x1e8>)
 8000874:	6013      	str	r3, [r2, #0]
		if (SlideNum > 3 + NumOfAlarms) SlideNum = 0;
 8000876:	4b4e      	ldr	r3, [pc, #312]	; (80009b0 <RunLoop+0x1ec>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	1cda      	adds	r2, r3, #3
 800087c:	4b4b      	ldr	r3, [pc, #300]	; (80009ac <RunLoop+0x1e8>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	429a      	cmp	r2, r3
 8000882:	da02      	bge.n	800088a <RunLoop+0xc6>
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <RunLoop+0x1e8>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
		GoingUp = true;
 800088a:	4b4a      	ldr	r3, [pc, #296]	; (80009b4 <RunLoop+0x1f0>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
	}
	if (isDown && !inSetting && !AlarmOn) {
 8000890:	4b40      	ldr	r3, [pc, #256]	; (8000994 <RunLoop+0x1d0>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d01e      	beq.n	80008d6 <RunLoop+0x112>
 8000898:	4b42      	ldr	r3, [pc, #264]	; (80009a4 <RunLoop+0x1e0>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d017      	beq.n	80008d6 <RunLoop+0x112>
 80008a6:	4b40      	ldr	r3, [pc, #256]	; (80009a8 <RunLoop+0x1e4>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d010      	beq.n	80008d6 <RunLoop+0x112>
		SlideNum--;
 80008b4:	4b3d      	ldr	r3, [pc, #244]	; (80009ac <RunLoop+0x1e8>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3b01      	subs	r3, #1
 80008ba:	4a3c      	ldr	r2, [pc, #240]	; (80009ac <RunLoop+0x1e8>)
 80008bc:	6013      	str	r3, [r2, #0]
		if (SlideNum < 0 ) SlideNum = 3 + NumOfAlarms;
 80008be:	4b3b      	ldr	r3, [pc, #236]	; (80009ac <RunLoop+0x1e8>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da04      	bge.n	80008d0 <RunLoop+0x10c>
 80008c6:	4b3a      	ldr	r3, [pc, #232]	; (80009b0 <RunLoop+0x1ec>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3303      	adds	r3, #3
 80008cc:	4a37      	ldr	r2, [pc, #220]	; (80009ac <RunLoop+0x1e8>)
 80008ce:	6013      	str	r3, [r2, #0]
		GoingUp = false;
 80008d0:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <RunLoop+0x1f0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	701a      	strb	r2, [r3, #0]
	}

	if (!AlarmOn) {
 80008d6:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <RunLoop+0x1e4>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	f083 0301 	eor.w	r3, r3, #1
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d004      	beq.n	80008ee <RunLoop+0x12a>
		ChooseDisplay(SlideNum);
 80008e4:	4b31      	ldr	r3, [pc, #196]	; (80009ac <RunLoop+0x1e8>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f000 f86f 	bl	80009cc <ChooseDisplay>

	}
	int NextMedIndex = nextMed();
 80008ee:	f000 fac1 	bl	8000e74 <nextMed>
 80008f2:	6078      	str	r0, [r7, #4]
	if (nextMed() != -1 && NextMedIndex != lastAlarm) {
 80008f4:	f000 fabe 	bl	8000e74 <nextMed>
 80008f8:	4603      	mov	r3, r0
 80008fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008fe:	d013      	beq.n	8000928 <RunLoop+0x164>
 8000900:	4b2d      	ldr	r3, [pc, #180]	; (80009b8 <RunLoop+0x1f4>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	687a      	ldr	r2, [r7, #4]
 8000906:	429a      	cmp	r2, r3
 8000908:	d00e      	beq.n	8000928 <RunLoop+0x164>
		toggleCount = 1;
 800090a:	4b24      	ldr	r3, [pc, #144]	; (800099c <RunLoop+0x1d8>)
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
		inSetting = false;
 8000910:	4b24      	ldr	r3, [pc, #144]	; (80009a4 <RunLoop+0x1e0>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
		AlarmOn = true;
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <RunLoop+0x1e4>)
 8000918:	2201      	movs	r2, #1
 800091a:	701a      	strb	r2, [r3, #0]
		PlaySound(isLoud, true);
 800091c:	4b27      	ldr	r3, [pc, #156]	; (80009bc <RunLoop+0x1f8>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2101      	movs	r1, #1
 8000922:	4618      	mov	r0, r3
 8000924:	f001 f82a 	bl	800197c <PlaySound>
	}

	if (AlarmOn) {
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <RunLoop+0x1e4>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d01c      	beq.n	800096a <RunLoop+0x1a6>
		G_TakeMed(NextMedIndex + 1, isBlinkON);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	3301      	adds	r3, #1
 8000934:	4a22      	ldr	r2, [pc, #136]	; (80009c0 <RunLoop+0x1fc>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	4611      	mov	r1, r2
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff fea4 	bl	8000688 <G_TakeMed>
		if (isSelect) {
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <RunLoop+0x1c8>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d010      	beq.n	800096a <RunLoop+0x1a6>
			AlarmOn = false;
 8000948:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <RunLoop+0x1e4>)
 800094a:	2200      	movs	r2, #0
 800094c:	701a      	strb	r2, [r3, #0]
			lastAlarm = NextMedIndex;
 800094e:	4a1a      	ldr	r2, [pc, #104]	; (80009b8 <RunLoop+0x1f4>)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6013      	str	r3, [r2, #0]
			lastmin = Time.Minutes;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <RunLoop+0x200>)
 8000956:	785b      	ldrb	r3, [r3, #1]
 8000958:	461a      	mov	r2, r3
 800095a:	4b1b      	ldr	r3, [pc, #108]	; (80009c8 <RunLoop+0x204>)
 800095c:	601a      	str	r2, [r3, #0]
			PlaySound(isLoud, false);
 800095e:	4b17      	ldr	r3, [pc, #92]	; (80009bc <RunLoop+0x1f8>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2100      	movs	r1, #0
 8000964:	4618      	mov	r0, r3
 8000966:	f001 f809 	bl	800197c <PlaySound>
		}
	}
	if (lastmin != Time.Minutes) lastAlarm = -1;
 800096a:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <RunLoop+0x200>)
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	461a      	mov	r2, r3
 8000970:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <RunLoop+0x204>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	429a      	cmp	r2, r3
 8000976:	d005      	beq.n	8000984 <RunLoop+0x1c0>
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <RunLoop+0x1f4>)
 800097a:	f04f 32ff 	mov.w	r2, #4294967295
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	e000      	b.n	8000984 <RunLoop+0x1c0>
		return;
 8000982:	bf00      	nop
}
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000119 	.word	0x20000119
 8000990:	2000011a 	.word	0x2000011a
 8000994:	2000011b 	.word	0x2000011b
 8000998:	20000008 	.word	0x20000008
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	20000110 	.word	0x20000110
 80009a4:	2000010c 	.word	0x2000010c
 80009a8:	20000104 	.word	0x20000104
 80009ac:	20000108 	.word	0x20000108
 80009b0:	20000100 	.word	0x20000100
 80009b4:	2000010e 	.word	0x2000010e
 80009b8:	20000000 	.word	0x20000000
 80009bc:	20000118 	.word	0x20000118
 80009c0:	20000114 	.word	0x20000114
 80009c4:	20000198 	.word	0x20000198
 80009c8:	20000004 	.word	0x20000004

080009cc <ChooseDisplay>:

void ChooseDisplay(int i) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b084      	sub	sp, #16
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	if (toggleCount % 2 == 0) {
 80009d4:	4b42      	ldr	r3, [pc, #264]	; (8000ae0 <ChooseDisplay+0x114>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d105      	bne.n	80009ec <ChooseDisplay+0x20>
		inSetting = true;
 80009e0:	4b40      	ldr	r3, [pc, #256]	; (8000ae4 <ChooseDisplay+0x118>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
		Display_Blink();
 80009e6:	f000 fb69 	bl	80010bc <Display_Blink>
 80009ea:	e004      	b.n	80009f6 <ChooseDisplay+0x2a>
	}
	else {
		inSetting = false;
 80009ec:	4b3d      	ldr	r3, [pc, #244]	; (8000ae4 <ChooseDisplay+0x118>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
		Display_NoBlink();
 80009f2:	f000 fb4d 	bl	8001090 <Display_NoBlink>
	}

	switch(i) {
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d830      	bhi.n	8000a5e <ChooseDisplay+0x92>
 80009fc:	a201      	add	r2, pc, #4	; (adr r2, 8000a04 <ChooseDisplay+0x38>)
 80009fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a02:	bf00      	nop
 8000a04:	08000a15 	.word	0x08000a15
 8000a08:	08000a1f 	.word	0x08000a1f
 8000a0c:	08000a2f 	.word	0x08000a2f
 8000a10:	08000a3f 	.word	0x08000a3f
		case 0:
			L_SetTime();
 8000a14:	f000 f874 	bl	8000b00 <L_SetTime>
			G_SetTime();
 8000a18:	f7ff fdb0 	bl	800057c <G_SetTime>
			break;
 8000a1c:	e04c      	b.n	8000ab8 <ChooseDisplay+0xec>
		case 1:
			L_SetBlink();
 8000a1e:	f000 f8d9 	bl	8000bd4 <L_SetBlink>
			G_SetBlink(isBlinkON);
 8000a22:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <ChooseDisplay+0x11c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f7ff fdd0 	bl	80005cc <G_SetBlink>
			break;
 8000a2c:	e044      	b.n	8000ab8 <ChooseDisplay+0xec>
		case 2:
			L_SetVolume();
 8000a2e:	f000 f8ab 	bl	8000b88 <L_SetVolume>
			G_SetVolume(isLoud);
 8000a32:	4b2e      	ldr	r3, [pc, #184]	; (8000aec <ChooseDisplay+0x120>)
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fdac 	bl	8000594 <G_SetVolume>
			break;
 8000a3c:	e03c      	b.n	8000ab8 <ChooseDisplay+0xec>
		case 3:
			if (!inSetting) G_Add_Med();
 8000a3e:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <ChooseDisplay+0x118>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	f083 0301 	eor.w	r3, r3, #1
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <ChooseDisplay+0x84>
 8000a4c:	f7ff fdd8 	bl	8000600 <G_Add_Med>
			if (inSetting) L_Add_Med();
 8000a50:	4b24      	ldr	r3, [pc, #144]	; (8000ae4 <ChooseDisplay+0x118>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d02e      	beq.n	8000ab6 <ChooseDisplay+0xea>
 8000a58:	f000 f8e2 	bl	8000c20 <L_Add_Med>
			break;
 8000a5c:	e02b      	b.n	8000ab6 <ChooseDisplay+0xea>
		default:
			int current_med = GetNextMed(i , GoingUp);
 8000a5e:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <ChooseDisplay+0x124>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	6878      	ldr	r0, [r7, #4]
 8000a66:	f000 f9c7 	bl	8000df8 <GetNextMed>
 8000a6a:	60f8      	str	r0, [r7, #12]
			if (!inSetting && current_med > -1) {
 8000a6c:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <ChooseDisplay+0x118>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f083 0301 	eor.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d011      	beq.n	8000a9e <ChooseDisplay+0xd2>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0e      	blt.n	8000a9e <ChooseDisplay+0xd2>
				G_Display_Med(current_med + 1, medTime[current_med][0], medTime[current_med][1]);
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	1c58      	adds	r0, r3, #1
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <ChooseDisplay+0x128>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <ChooseDisplay+0x128>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	00db      	lsls	r3, r3, #3
 8000a92:	4413      	add	r3, r2
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	461a      	mov	r2, r3
 8000a98:	f7ff fdbe 	bl	8000618 <G_Display_Med>
			if (!inSetting && current_med > -1) {
 8000a9c:	e00c      	b.n	8000ab8 <ChooseDisplay+0xec>
			}
			else if (current_med > -1) {
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db09      	blt.n	8000ab8 <ChooseDisplay+0xec>
				G_Delete_Med(current_med + 1);
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fdd3 	bl	8000654 <G_Delete_Med>
				L_Delete_Med(current_med);
 8000aae:	68f8      	ldr	r0, [r7, #12]
 8000ab0:	f000 f938 	bl	8000d24 <L_Delete_Med>
 8000ab4:	e000      	b.n	8000ab8 <ChooseDisplay+0xec>
			break;
 8000ab6:	bf00      	nop
			}
	}

	if (isSelect && !Block_Toggle) toggleCount++;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <ChooseDisplay+0x12c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d00b      	beq.n	8000ad8 <ChooseDisplay+0x10c>
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <ChooseDisplay+0x130>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	f083 0301 	eor.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d004      	beq.n	8000ad8 <ChooseDisplay+0x10c>
 8000ace:	4b04      	ldr	r3, [pc, #16]	; (8000ae0 <ChooseDisplay+0x114>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	4a02      	ldr	r2, [pc, #8]	; (8000ae0 <ChooseDisplay+0x114>)
 8000ad6:	6013      	str	r3, [r2, #0]
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	2000000c 	.word	0x2000000c
 8000ae4:	2000010c 	.word	0x2000010c
 8000ae8:	20000114 	.word	0x20000114
 8000aec:	20000118 	.word	0x20000118
 8000af0:	2000010e 	.word	0x2000010e
 8000af4:	200000c0 	.word	0x200000c0
 8000af8:	20000119 	.word	0x20000119
 8000afc:	2000010d 	.word	0x2000010d

08000b00 <L_SetTime>:

void L_SetTime() {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
	if (!inSetting) return;
 8000b06:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <L_SetTime+0x78>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	f083 0301 	eor.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d12c      	bne.n	8000b6e <L_SetTime+0x6e>
	if (isUp) {
 8000b14:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <L_SetTime+0x7c>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d015      	beq.n	8000b48 <L_SetTime+0x48>
		uint8_t min = Time.Minutes + 1;
 8000b1c:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <L_SetTime+0x80>)
 8000b1e:	785b      	ldrb	r3, [r3, #1]
 8000b20:	3301      	adds	r3, #1
 8000b22:	71fb      	strb	r3, [r7, #7]
		uint8_t ho = Time.Hours;
 8000b24:	4b16      	ldr	r3, [pc, #88]	; (8000b80 <L_SetTime+0x80>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	71bb      	strb	r3, [r7, #6]
		if (min > 59) {
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b3b      	cmp	r3, #59	; 0x3b
 8000b2e:	d904      	bls.n	8000b3a <L_SetTime+0x3a>
			ho++;
 8000b30:	79bb      	ldrb	r3, [r7, #6]
 8000b32:	3301      	adds	r3, #1
 8000b34:	71bb      	strb	r3, [r7, #6]
			min = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	71fb      	strb	r3, [r7, #7]
		}
		SetTime(ho, min);
 8000b3a:	79bb      	ldrb	r3, [r7, #6]
 8000b3c:	79fa      	ldrb	r2, [r7, #7]
 8000b3e:	4611      	mov	r1, r2
 8000b40:	4618      	mov	r0, r3
 8000b42:	f000 fe61 	bl	8001808 <SetTime>
 8000b46:	e013      	b.n	8000b70 <L_SetTime+0x70>
	}
	else if (isDown) {
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <L_SetTime+0x84>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d00f      	beq.n	8000b70 <L_SetTime+0x70>
		if (Time.Hours >= 0) {
			if (Time.Minutes > 0) {
 8000b50:	4b0b      	ldr	r3, [pc, #44]	; (8000b80 <L_SetTime+0x80>)
 8000b52:	785b      	ldrb	r3, [r3, #1]
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d00b      	beq.n	8000b70 <L_SetTime+0x70>
				SetTime(Time.Hours, Time.Minutes - 0x1);
 8000b58:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <L_SetTime+0x80>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	461a      	mov	r2, r3
 8000b5e:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <L_SetTime+0x80>)
 8000b60:	785b      	ldrb	r3, [r3, #1]
 8000b62:	3b01      	subs	r3, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	4610      	mov	r0, r2
 8000b68:	f000 fe4e 	bl	8001808 <SetTime>
 8000b6c:	e000      	b.n	8000b70 <L_SetTime+0x70>
	if (!inSetting) return;
 8000b6e:	bf00      	nop
			}
		}
	}
}
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000010c 	.word	0x2000010c
 8000b7c:	2000011a 	.word	0x2000011a
 8000b80:	20000198 	.word	0x20000198
 8000b84:	2000011b 	.word	0x2000011b

08000b88 <L_SetVolume>:

void L_SetVolume() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	if (!inSetting) return;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <L_SetVolume+0x3c>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	f083 0301 	eor.w	r3, r3, #1
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d10f      	bne.n	8000bba <L_SetVolume+0x32>
	if (isUp) {
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	; (8000bc8 <L_SetVolume+0x40>)
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d003      	beq.n	8000baa <L_SetVolume+0x22>
		isLoud = true;
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <L_SetVolume+0x44>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e008      	b.n	8000bbc <L_SetVolume+0x34>
	}
	else if (isDown) {
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <L_SetVolume+0x48>)
 8000bac:	781b      	ldrb	r3, [r3, #0]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d004      	beq.n	8000bbc <L_SetVolume+0x34>
		isLoud = false;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <L_SetVolume+0x44>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
 8000bb8:	e000      	b.n	8000bbc <L_SetVolume+0x34>
	if (!inSetting) return;
 8000bba:	bf00      	nop
	}
}
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc2:	4770      	bx	lr
 8000bc4:	2000010c 	.word	0x2000010c
 8000bc8:	2000011a 	.word	0x2000011a
 8000bcc:	20000118 	.word	0x20000118
 8000bd0:	2000011b 	.word	0x2000011b

08000bd4 <L_SetBlink>:

void L_SetBlink() {
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
	if (!inSetting) return;
 8000bd8:	4b0d      	ldr	r3, [pc, #52]	; (8000c10 <L_SetBlink+0x3c>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	f083 0301 	eor.w	r3, r3, #1
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d10f      	bne.n	8000c06 <L_SetBlink+0x32>
	if (isUp) {
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <L_SetBlink+0x40>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <L_SetBlink+0x22>
		isBlinkON = 1;
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <L_SetBlink+0x44>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	e008      	b.n	8000c08 <L_SetBlink+0x34>
	}
	else if (isDown) {
 8000bf6:	4b09      	ldr	r3, [pc, #36]	; (8000c1c <L_SetBlink+0x48>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d004      	beq.n	8000c08 <L_SetBlink+0x34>
		isBlinkON = 0;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <L_SetBlink+0x44>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	e000      	b.n	8000c08 <L_SetBlink+0x34>
	if (!inSetting) return;
 8000c06:	bf00      	nop
	}
}
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr
 8000c10:	2000010c 	.word	0x2000010c
 8000c14:	2000011a 	.word	0x2000011a
 8000c18:	20000114 	.word	0x20000114
 8000c1c:	2000011b 	.word	0x2000011b

08000c20 <L_Add_Med>:

void L_Add_Med() {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
	if (!inSetting) return;
 8000c26:	4b36      	ldr	r3, [pc, #216]	; (8000d00 <L_Add_Med+0xe0>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	f083 0301 	eor.w	r3, r3, #1
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d160      	bne.n	8000cf6 <L_Add_Med+0xd6>
	Block_Toggle = true;
 8000c34:	4b33      	ldr	r3, [pc, #204]	; (8000d04 <L_Add_Med+0xe4>)
 8000c36:	2201      	movs	r2, #1
 8000c38:	701a      	strb	r2, [r3, #0]

	if (isUp) {
 8000c3a:	4b33      	ldr	r3, [pc, #204]	; (8000d08 <L_Add_Med+0xe8>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d005      	beq.n	8000c4e <L_Add_Med+0x2e>
		Alarm_Minutes++;
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <L_Add_Med+0xec>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	4a30      	ldr	r2, [pc, #192]	; (8000d0c <L_Add_Med+0xec>)
 8000c4a:	6013      	str	r3, [r2, #0]
 8000c4c:	e008      	b.n	8000c60 <L_Add_Med+0x40>
	}
	else if (isDown) {
 8000c4e:	4b30      	ldr	r3, [pc, #192]	; (8000d10 <L_Add_Med+0xf0>)
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d004      	beq.n	8000c60 <L_Add_Med+0x40>
		Alarm_Minutes--;
 8000c56:	4b2d      	ldr	r3, [pc, #180]	; (8000d0c <L_Add_Med+0xec>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	3b01      	subs	r3, #1
 8000c5c:	4a2b      	ldr	r2, [pc, #172]	; (8000d0c <L_Add_Med+0xec>)
 8000c5e:	6013      	str	r3, [r2, #0]
	}

	if (Alarm_Minutes > 59) {
 8000c60:	4b2a      	ldr	r3, [pc, #168]	; (8000d0c <L_Add_Med+0xec>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2b3b      	cmp	r3, #59	; 0x3b
 8000c66:	dd07      	ble.n	8000c78 <L_Add_Med+0x58>
		Alarm_Minutes = 0;
 8000c68:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <L_Add_Med+0xec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
		Alarm_Hours++;
 8000c6e:	4b29      	ldr	r3, [pc, #164]	; (8000d14 <L_Add_Med+0xf4>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	3301      	adds	r3, #1
 8000c74:	4a27      	ldr	r2, [pc, #156]	; (8000d14 <L_Add_Med+0xf4>)
 8000c76:	6013      	str	r3, [r2, #0]
	}
	if (Alarm_Minutes < 0) {
 8000c78:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <L_Add_Med+0xec>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	da07      	bge.n	8000c90 <L_Add_Med+0x70>
		Alarm_Minutes = 59;
 8000c80:	4b22      	ldr	r3, [pc, #136]	; (8000d0c <L_Add_Med+0xec>)
 8000c82:	223b      	movs	r2, #59	; 0x3b
 8000c84:	601a      	str	r2, [r3, #0]
		Alarm_Hours--;
 8000c86:	4b23      	ldr	r3, [pc, #140]	; (8000d14 <L_Add_Med+0xf4>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	4a21      	ldr	r2, [pc, #132]	; (8000d14 <L_Add_Med+0xf4>)
 8000c8e:	6013      	str	r3, [r2, #0]
	}
	if (Alarm_Hours < 0) Alarm_Hours = 0;
 8000c90:	4b20      	ldr	r3, [pc, #128]	; (8000d14 <L_Add_Med+0xf4>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	da02      	bge.n	8000c9e <L_Add_Med+0x7e>
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <L_Add_Med+0xf4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	601a      	str	r2, [r3, #0]

	int i = FindEmpty();
 8000c9e:	f000 f88d 	bl	8000dbc <FindEmpty>
 8000ca2:	6078      	str	r0, [r7, #4]

	G_Display_Med(i + 1, Alarm_Hours, Alarm_Minutes);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	4a1a      	ldr	r2, [pc, #104]	; (8000d14 <L_Add_Med+0xf4>)
 8000caa:	6811      	ldr	r1, [r2, #0]
 8000cac:	4a17      	ldr	r2, [pc, #92]	; (8000d0c <L_Add_Med+0xec>)
 8000cae:	6812      	ldr	r2, [r2, #0]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f7ff fcb1 	bl	8000618 <G_Display_Med>

	if (isSelect) {
 8000cb6:	4b18      	ldr	r3, [pc, #96]	; (8000d18 <L_Add_Med+0xf8>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d01c      	beq.n	8000cf8 <L_Add_Med+0xd8>
		medTime[i][0] = Alarm_Hours;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <L_Add_Med+0xf4>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4916      	ldr	r1, [pc, #88]	; (8000d1c <L_Add_Med+0xfc>)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		medTime[i][1] = Alarm_Minutes;
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <L_Add_Med+0xec>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	4913      	ldr	r1, [pc, #76]	; (8000d1c <L_Add_Med+0xfc>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	440b      	add	r3, r1
 8000cd6:	605a      	str	r2, [r3, #4]
		Block_Toggle = false;
 8000cd8:	4b0a      	ldr	r3, [pc, #40]	; (8000d04 <L_Add_Med+0xe4>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
		NumOfAlarms++;
 8000cde:	4b10      	ldr	r3, [pc, #64]	; (8000d20 <L_Add_Med+0x100>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <L_Add_Med+0x100>)
 8000ce6:	6013      	str	r3, [r2, #0]
		Alarm_Minutes = 0;
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <L_Add_Med+0xec>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
		Alarm_Hours = 0;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <L_Add_Med+0xf4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	e000      	b.n	8000cf8 <L_Add_Med+0xd8>
	if (!inSetting) return;
 8000cf6:	bf00      	nop
	}
}
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	2000010c 	.word	0x2000010c
 8000d04:	2000010d 	.word	0x2000010d
 8000d08:	2000011a 	.word	0x2000011a
 8000d0c:	200000bc 	.word	0x200000bc
 8000d10:	2000011b 	.word	0x2000011b
 8000d14:	200000b8 	.word	0x200000b8
 8000d18:	20000119 	.word	0x20000119
 8000d1c:	200000c0 	.word	0x200000c0
 8000d20:	20000100 	.word	0x20000100

08000d24 <L_Delete_Med>:

void L_Delete_Med(int i) {
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	if (!inSetting) return;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <L_Delete_Med+0x4c>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	f083 0301 	eor.w	r3, r3, #1
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d114      	bne.n	8000d64 <L_Delete_Med+0x40>
	if (isDown) {
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <L_Delete_Med+0x50>)
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d011      	beq.n	8000d66 <L_Delete_Med+0x42>
		medTime[i][0] = -1;
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <L_Delete_Med+0x54>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f04f 31ff 	mov.w	r1, #4294967295
 8000d4a:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		NumOfAlarms--;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <L_Delete_Med+0x58>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	3b01      	subs	r3, #1
 8000d54:	4a09      	ldr	r2, [pc, #36]	; (8000d7c <L_Delete_Med+0x58>)
 8000d56:	6013      	str	r3, [r2, #0]
		toggleCount++;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <L_Delete_Med+0x5c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a08      	ldr	r2, [pc, #32]	; (8000d80 <L_Delete_Med+0x5c>)
 8000d60:	6013      	str	r3, [r2, #0]
 8000d62:	e000      	b.n	8000d66 <L_Delete_Med+0x42>
	if (!inSetting) return;
 8000d64:	bf00      	nop
	}
}
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	2000010c 	.word	0x2000010c
 8000d74:	2000011b 	.word	0x2000011b
 8000d78:	200000c0 	.word	0x200000c0
 8000d7c:	20000100 	.word	0x20000100
 8000d80:	2000000c 	.word	0x2000000c

08000d84 <EmptyList>:

void EmptyList() {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
	for (int i = 0; i < 8; i++) {
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	e008      	b.n	8000da2 <EmptyList+0x1e>
		medTime[i][0] = -1;
 8000d90:	4a09      	ldr	r2, [pc, #36]	; (8000db8 <EmptyList+0x34>)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < 8; i++) {
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	607b      	str	r3, [r7, #4]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2b07      	cmp	r3, #7
 8000da6:	ddf3      	ble.n	8000d90 <EmptyList+0xc>
	}
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	200000c0 	.word	0x200000c0

08000dbc <FindEmpty>:

int FindEmpty() {
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	e00b      	b.n	8000de0 <FindEmpty+0x24>
		if (medTime[i][0] == -1) return i;
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <FindEmpty+0x38>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd4:	d101      	bne.n	8000dda <FindEmpty+0x1e>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	e005      	b.n	8000de6 <FindEmpty+0x2a>
	for(int i = 0; i < 8; i++) {
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b07      	cmp	r3, #7
 8000de4:	ddf0      	ble.n	8000dc8 <FindEmpty+0xc>
	}
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	200000c0 	.word	0x200000c0

08000df8 <GetNextMed>:

int GetNextMed(int start , bool isUp) {
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
	int i = start - 4;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b04      	subs	r3, #4
 8000e08:	60fb      	str	r3, [r7, #12]
	while (medTime[i][0] == -1) {
 8000e0a:	e020      	b.n	8000e4e <GetNextMed+0x56>
		if (isUp) i++;
 8000e0c:	78fb      	ldrb	r3, [r7, #3]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d002      	beq.n	8000e18 <GetNextMed+0x20>
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
		if (!isUp) i--;
 8000e18:	78fb      	ldrb	r3, [r7, #3]
 8000e1a:	f083 0301 	eor.w	r3, r3, #1
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d002      	beq.n	8000e2a <GetNextMed+0x32>
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	3b01      	subs	r3, #1
 8000e28:	60fb      	str	r3, [r7, #12]

		if (i < 0) {
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	da05      	bge.n	8000e3c <GetNextMed+0x44>
			SlideNum = 3;
 8000e30:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <GetNextMed+0x74>)
 8000e32:	2203      	movs	r2, #3
 8000e34:	601a      	str	r2, [r3, #0]
			return -1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e010      	b.n	8000e5e <GetNextMed+0x66>
		}
		if (i > (8 - 1)) {
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	2b07      	cmp	r3, #7
 8000e40:	dd05      	ble.n	8000e4e <GetNextMed+0x56>
			SlideNum = 0;
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <GetNextMed+0x74>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
			return -1;
 8000e48:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4c:	e007      	b.n	8000e5e <GetNextMed+0x66>
	while (medTime[i][0] == -1) {
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <GetNextMed+0x78>)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e5a:	d0d7      	beq.n	8000e0c <GetNextMed+0x14>
		}
	}
	return i;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000108 	.word	0x20000108
 8000e70:	200000c0 	.word	0x200000c0

08000e74 <nextMed>:

int nextMed() {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
	for(int i = 0; i < 8; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e015      	b.n	8000eac <nextMed+0x38>
		if (medTime[i][0] == Time.Hours && medTime[i][1] == Time.Minutes) {
 8000e80:	4a10      	ldr	r2, [pc, #64]	; (8000ec4 <nextMed+0x50>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <nextMed+0x54>)
 8000e8a:	7812      	ldrb	r2, [r2, #0]
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d10a      	bne.n	8000ea6 <nextMed+0x32>
 8000e90:	4a0c      	ldr	r2, [pc, #48]	; (8000ec4 <nextMed+0x50>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	00db      	lsls	r3, r3, #3
 8000e96:	4413      	add	r3, r2
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <nextMed+0x54>)
 8000e9c:	7852      	ldrb	r2, [r2, #1]
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <nextMed+0x32>
			return i;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	e007      	b.n	8000eb6 <nextMed+0x42>
	for(int i = 0; i < 8; i++) {
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2b07      	cmp	r3, #7
 8000eb0:	dde6      	ble.n	8000e80 <nextMed+0xc>
		}
	}
	return -1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200000c0 	.word	0x200000c0
 8000ec8:	20000198 	.word	0x20000198

08000ecc <Display_Init>:
        0b00110,
        0b00000
};

void Display_Init(uint8_t rows)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000ed6:	4a38      	ldr	r2, [pc, #224]	; (8000fb8 <Display_Init+0xec>)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000edc:	4b37      	ldr	r3, [pc, #220]	; (8000fbc <Display_Init+0xf0>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <Display_Init+0xf4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000ee8:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <Display_Init+0xec>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d907      	bls.n	8000f00 <Display_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000ef0:	4b33      	ldr	r3, [pc, #204]	; (8000fc0 <Display_Init+0xf4>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	f043 0308 	orr.w	r3, r3, #8
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4b31      	ldr	r3, [pc, #196]	; (8000fc0 <Display_Init+0xf4>)
 8000efc:	701a      	strb	r2, [r3, #0]
 8000efe:	e006      	b.n	8000f0e <Display_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000f00:	4b2f      	ldr	r3, [pc, #188]	; (8000fc0 <Display_Init+0xf4>)
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	f043 0304 	orr.w	r3, r3, #4
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <Display_Init+0xf4>)
 8000f0c:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000f0e:	f000 f9c9 	bl	80012a4 <DelayInit>
  HAL_Delay(50);
 8000f12:	2032      	movs	r0, #50	; 0x32
 8000f14:	f000 ff0e 	bl	8001d34 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000f18:	4b28      	ldr	r3, [pc, #160]	; (8000fbc <Display_Init+0xf0>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 f987 	bl	8001230 <ExpanderWrite>
  HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 ff05 	bl	8001d34 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000f2a:	2030      	movs	r0, #48	; 0x30
 8000f2c:	f000 f96f 	bl	800120e <Write4Bits>
  DelayUS(4500);
 8000f30:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f34:	f000 f9e0 	bl	80012f8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f38:	2030      	movs	r0, #48	; 0x30
 8000f3a:	f000 f968 	bl	800120e <Write4Bits>
  DelayUS(4500);
 8000f3e:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f42:	f000 f9d9 	bl	80012f8 <DelayUS>

  Write4Bits(0x03 << 4);
 8000f46:	2030      	movs	r0, #48	; 0x30
 8000f48:	f000 f961 	bl	800120e <Write4Bits>
  DelayUS(4500);
 8000f4c:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f50:	f000 f9d2 	bl	80012f8 <DelayUS>

  Write4Bits(0x02 << 4);
 8000f54:	2020      	movs	r0, #32
 8000f56:	f000 f95a 	bl	800120e <Write4Bits>
  DelayUS(100);
 8000f5a:	2064      	movs	r0, #100	; 0x64
 8000f5c:	f000 f9cc 	bl	80012f8 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <Display_Init+0xf4>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	f043 0320 	orr.w	r3, r3, #32
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 f912 	bl	8001194 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000f70:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <Display_Init+0xf8>)
 8000f72:	2204      	movs	r2, #4
 8000f74:	701a      	strb	r2, [r3, #0]
  Display_Display();
 8000f76:	f000 f875 	bl	8001064 <Display_Display>
  Display_Clear();
 8000f7a:	f000 f82b 	bl	8000fd4 <Display_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <Display_Init+0xfc>)
 8000f80:	2202      	movs	r2, #2
 8000f82:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000f84:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <Display_Init+0xfc>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	f043 0304 	orr.w	r3, r3, #4
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f900 	bl	8001194 <SendCommand>
  DelayUS(4500);
 8000f94:	f241 1094 	movw	r0, #4500	; 0x1194
 8000f98:	f000 f9ae 	bl	80012f8 <DelayUS>

  Display_CreateSpecialChar(0, special1);
 8000f9c:	490b      	ldr	r1, [pc, #44]	; (8000fcc <Display_Init+0x100>)
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f8a2 	bl	80010e8 <Display_CreateSpecialChar>
  Display_CreateSpecialChar(1, special2);
 8000fa4:	490a      	ldr	r1, [pc, #40]	; (8000fd0 <Display_Init+0x104>)
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	f000 f89e 	bl	80010e8 <Display_CreateSpecialChar>

  Display_Home();
 8000fac:	f000 f81d 	bl	8000fea <Display_Home>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	2000011f 	.word	0x2000011f
 8000fbc:	20000120 	.word	0x20000120
 8000fc0:	2000011c 	.word	0x2000011c
 8000fc4:	2000011d 	.word	0x2000011d
 8000fc8:	2000011e 	.word	0x2000011e
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	20000018 	.word	0x20000018

08000fd4 <Display_Clear>:

void Display_Clear()
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f000 f8db 	bl	8001194 <SendCommand>
  DelayUS(2000);
 8000fde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fe2:	f000 f989 	bl	80012f8 <DelayUS>
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <Display_Home>:

void Display_Home()
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000fee:	2002      	movs	r0, #2
 8000ff0:	f000 f8d0 	bl	8001194 <SendCommand>
  DelayUS(2000);
 8000ff4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ff8:	f000 f97e 	bl	80012f8 <DelayUS>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <Display_SetCursor>:

void Display_SetCursor(uint8_t col, uint8_t row)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b087      	sub	sp, #28
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <Display_SetCursor+0x5c>)
 8001012:	f107 0408 	add.w	r4, r7, #8
 8001016:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001018:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <Display_SetCursor+0x60>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	79ba      	ldrb	r2, [r7, #6]
 8001022:	429a      	cmp	r2, r3
 8001024:	d303      	bcc.n	800102e <Display_SetCursor+0x2e>
  {
    row = dpRows-1;
 8001026:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <Display_SetCursor+0x60>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	3b01      	subs	r3, #1
 800102c:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	3318      	adds	r3, #24
 8001034:	443b      	add	r3, r7
 8001036:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	4413      	add	r3, r2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	b25b      	sxtb	r3, r3
 8001044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001048:	b25b      	sxtb	r3, r3
 800104a:	b2db      	uxtb	r3, r3
 800104c:	4618      	mov	r0, r3
 800104e:	f000 f8a1 	bl	8001194 <SendCommand>
}
 8001052:	bf00      	nop
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	bd90      	pop	{r4, r7, pc}
 800105a:	bf00      	nop
 800105c:	08004618 	.word	0x08004618
 8001060:	2000011f 	.word	0x2000011f

08001064 <Display_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void Display_Display()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8001068:	4b08      	ldr	r3, [pc, #32]	; (800108c <Display_Display+0x28>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	f043 0304 	orr.w	r3, r3, #4
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b06      	ldr	r3, [pc, #24]	; (800108c <Display_Display+0x28>)
 8001074:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8001076:	4b05      	ldr	r3, [pc, #20]	; (800108c <Display_Display+0x28>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	b2db      	uxtb	r3, r3
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f887 	bl	8001194 <SendCommand>
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	2000011d 	.word	0x2000011d

08001090 <Display_NoBlink>:
  dpControl |= LCD_CURSORON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void Display_NoBlink()
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  dpControl &= ~LCD_BLINKON;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <Display_NoBlink+0x28>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	b2da      	uxtb	r2, r3
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <Display_NoBlink+0x28>)
 80010a0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010a2:	4b05      	ldr	r3, [pc, #20]	; (80010b8 <Display_NoBlink+0x28>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	f043 0308 	orr.w	r3, r3, #8
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f871 	bl	8001194 <SendCommand>
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000011d 	.word	0x2000011d

080010bc <Display_Blink>:

void Display_Blink()
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  dpControl |= LCD_BLINKON;
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <Display_Blink+0x28>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	b2da      	uxtb	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <Display_Blink+0x28>)
 80010cc:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <Display_Blink+0x28>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	f000 f85b 	bl	8001194 <SendCommand>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	2000011d 	.word	0x2000011d

080010e8 <Display_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void Display_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	00db      	lsls	r3, r3, #3
 8001100:	b25b      	sxtb	r3, r3
 8001102:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001106:	b25b      	sxtb	r3, r3
 8001108:	b2db      	uxtb	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f842 	bl	8001194 <SendCommand>
  for (int i=0; i<8; i++)
 8001110:	2300      	movs	r3, #0
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	e009      	b.n	800112a <Display_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	683a      	ldr	r2, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f000 f846 	bl	80011b0 <SendChar>
  for (int i=0; i<8; i++)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3301      	adds	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b07      	cmp	r3, #7
 800112e:	ddf2      	ble.n	8001116 <Display_CreateSpecialChar+0x2e>
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <Display_PrintStr>:
{
  Display_CreateSpecialChar(char_num, rows);
}

void Display_PrintStr(const char c[])
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b082      	sub	sp, #8
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8001142:	e006      	b.n	8001152 <Display_PrintStr+0x18>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	1c5a      	adds	r2, r3, #1
 8001148:	607a      	str	r2, [r7, #4]
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f82f 	bl	80011b0 <SendChar>
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f4      	bne.n	8001144 <Display_PrintStr+0xa>
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <Display_NoBacklight>:
  if(new_val) Display_Backlight();
  else Display_NoBacklight();
}

void Display_NoBacklight(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  dpBacklight=LCD_NOBACKLIGHT;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <Display_NoBacklight+0x14>)
 800116a:	2200      	movs	r2, #0
 800116c:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 800116e:	2000      	movs	r0, #0
 8001170:	f000 f85e 	bl	8001230 <ExpanderWrite>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000120 	.word	0x20000120

0800117c <Display_Backlight>:

void Display_Backlight(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  dpBacklight=LCD_BACKLIGHT;
 8001180:	4b03      	ldr	r3, [pc, #12]	; (8001190 <Display_Backlight+0x14>)
 8001182:	2208      	movs	r2, #8
 8001184:	701a      	strb	r2, [r3, #0]
  ExpanderWrite(0);
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f852 	bl	8001230 <ExpanderWrite>
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000120 	.word	0x20000120

08001194 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f000 f812 	bl	80011cc <Send>
}
 80011a8:	bf00      	nop
 80011aa:	3708      	adds	r7, #8
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <SendChar>:

static void SendChar(uint8_t ch)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	2101      	movs	r1, #1
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f804 	bl	80011cc <Send>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f023 030f 	bic.w	r3, r3, #15
 80011e2:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	011b      	lsls	r3, r3, #4
 80011e8:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80011ea:	7bfa      	ldrb	r2, [r7, #15]
 80011ec:	79bb      	ldrb	r3, [r7, #6]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f80b 	bl	800120e <Write4Bits>
  Write4Bits((lownib)|mode);
 80011f8:	7bba      	ldrb	r2, [r7, #14]
 80011fa:	79bb      	ldrb	r3, [r7, #6]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f804 	bl	800120e <Write4Bits>
}
 8001206:	bf00      	nop
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001218:	79fb      	ldrb	r3, [r7, #7]
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f808 	bl	8001230 <ExpanderWrite>
  PulseEnable(value);
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f820 	bl	8001268 <PulseEnable>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af02      	add	r7, sp, #8
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <ExpanderWrite+0x30>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	4313      	orrs	r3, r2
 8001242:	b2db      	uxtb	r3, r3
 8001244:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001246:	f107 020f 	add.w	r2, r7, #15
 800124a:	230a      	movs	r3, #10
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2301      	movs	r3, #1
 8001250:	214e      	movs	r1, #78	; 0x4e
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <ExpanderWrite+0x34>)
 8001254:	f001 f98c 	bl	8002570 <HAL_I2C_Master_Transmit>
}
 8001258:	bf00      	nop
 800125a:	3710      	adds	r7, #16
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000120 	.word	0x20000120
 8001264:	20000124 	.word	0x20000124

08001268 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 8001272:	79fb      	ldrb	r3, [r7, #7]
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	b2db      	uxtb	r3, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff ffd8 	bl	8001230 <ExpanderWrite>
  DelayUS(20);
 8001280:	2014      	movs	r0, #20
 8001282:	f000 f839 	bl	80012f8 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f023 0304 	bic.w	r3, r3, #4
 800128c:	b2db      	uxtb	r3, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ffce 	bl	8001230 <ExpanderWrite>
  DelayUS(20);
 8001294:	2014      	movs	r0, #20
 8001296:	f000 f82f 	bl	80012f8 <DelayUS>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
	...

080012a4 <DelayInit>:

static void DelayInit(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <DelayInit+0x4c>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	4a10      	ldr	r2, [pc, #64]	; (80012f0 <DelayInit+0x4c>)
 80012ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80012b2:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80012b4:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <DelayInit+0x4c>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	4a0d      	ldr	r2, [pc, #52]	; (80012f0 <DelayInit+0x4c>)
 80012ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80012be:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80012c0:	4b0c      	ldr	r3, [pc, #48]	; (80012f4 <DelayInit+0x50>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <DelayInit+0x50>)
 80012c6:	f023 0301 	bic.w	r3, r3, #1
 80012ca:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80012cc:	4b09      	ldr	r3, [pc, #36]	; (80012f4 <DelayInit+0x50>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a08      	ldr	r2, [pc, #32]	; (80012f4 <DelayInit+0x50>)
 80012d2:	f043 0301 	orr.w	r3, r3, #1
 80012d6:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80012d8:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <DelayInit+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80012de:	bf00      	nop
  __ASM volatile ("NOP");
 80012e0:	bf00      	nop
  __ASM volatile ("NOP");
 80012e2:	bf00      	nop
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	e000edf0 	.word	0xe000edf0
 80012f4:	e0001000 	.word	0xe0001000

080012f8 <DelayUS>:

static void DelayUS(uint32_t us) {
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <DelayUS+0x44>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a0e      	ldr	r2, [pc, #56]	; (8001340 <DelayUS+0x48>)
 8001306:	fba2 2303 	umull	r2, r3, r2, r3
 800130a:	0c9a      	lsrs	r2, r3, #18
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	fb02 f303 	mul.w	r3, r2, r3
 8001312:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <DelayUS+0x4c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <DelayUS+0x4c>)
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	429a      	cmp	r2, r3
 800132a:	d8f6      	bhi.n	800131a <DelayUS+0x22>
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	371c      	adds	r7, #28
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000020 	.word	0x20000020
 8001340:	431bde83 	.word	0x431bde83
 8001344:	e0001000 	.word	0xe0001000

08001348 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800134e:	f000 fc7f 	bl	8001c50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001352:	f000 f83d 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001356:	f000 f925 	bl	80015a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800135a:	f000 f89b 	bl	8001494 <MX_I2C1_Init>
  MX_RTC_Init();
 800135e:	f000 f8c7 	bl	80014f0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  RunSetUp();
 8001362:	f7ff f9e9 	bl	8000738 <RunSetUp>
  bool SelectB = false;
 8001366:	2300      	movs	r3, #0
 8001368:	71fb      	strb	r3, [r7, #7]
  bool SelectD = false;
 800136a:	2300      	movs	r3, #0
 800136c:	71bb      	strb	r3, [r7, #6]
  bool SelectU = false;
 800136e:	2300      	movs	r3, #0
 8001370:	717b      	strb	r3, [r7, #5]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  RTC_DateTypeDef Date = {0};
 8001372:	2300      	movs	r3, #0
 8001374:	603b      	str	r3, [r7, #0]
	  if (HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN) != HAL_OK)
 8001376:	2200      	movs	r2, #0
 8001378:	4911      	ldr	r1, [pc, #68]	; (80013c0 <main+0x78>)
 800137a:	4812      	ldr	r0, [pc, #72]	; (80013c4 <main+0x7c>)
 800137c:	f002 fa42 	bl	8003804 <HAL_RTC_GetTime>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <main+0x42>
	  {
	  	  Error_Handler();
 8001386:	f000 fb25 	bl	80019d4 <Error_Handler>
	  }
	  if (HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	2200      	movs	r2, #0
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <main+0x7c>)
 8001392:	f002 fb19 	bl	80039c8 <HAL_RTC_GetDate>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <main+0x58>
	  {
	  	  Error_Handler();
 800139c:	f000 fb1a 	bl	80019d4 <Error_Handler>
	  }
	  sprintf(TimeInChar, "%02d:%02d", Time.Hours, Time.Minutes);
 80013a0:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <main+0x78>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <main+0x78>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	4907      	ldr	r1, [pc, #28]	; (80013c8 <main+0x80>)
 80013ac:	4807      	ldr	r0, [pc, #28]	; (80013cc <main+0x84>)
 80013ae:	f002 fc17 	bl	8003be0 <siprintf>
	  RunLoop();
 80013b2:	f7ff fa07 	bl	80007c4 <RunLoop>
	  HAL_Delay(167);
 80013b6:	20a7      	movs	r0, #167	; 0xa7
 80013b8:	f000 fcbc 	bl	8001d34 <HAL_Delay>
  {
 80013bc:	e7d9      	b.n	8001372 <main+0x2a>
 80013be:	bf00      	nop
 80013c0:	20000198 	.word	0x20000198
 80013c4:	20000178 	.word	0x20000178
 80013c8:	08004628 	.word	0x08004628
 80013cc:	200001ac 	.word	0x200001ac

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b094      	sub	sp, #80	; 0x50
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	f107 0320 	add.w	r3, r7, #32
 80013da:	2230      	movs	r2, #48	; 0x30
 80013dc:	2100      	movs	r1, #0
 80013de:	4618      	mov	r0, r3
 80013e0:	f002 fc1e 	bl	8003c20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f4:	2300      	movs	r3, #0
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	4b24      	ldr	r3, [pc, #144]	; (800148c <SystemClock_Config+0xbc>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a23      	ldr	r2, [pc, #140]	; (800148c <SystemClock_Config+0xbc>)
 80013fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
 8001404:	4b21      	ldr	r3, [pc, #132]	; (800148c <SystemClock_Config+0xbc>)
 8001406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001408:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140c:	60bb      	str	r3, [r7, #8]
 800140e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001410:	2300      	movs	r3, #0
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <SystemClock_Config+0xc0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800141c:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <SystemClock_Config+0xc0>)
 800141e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <SystemClock_Config+0xc0>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800142c:	607b      	str	r3, [r7, #4]
 800142e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001430:	230a      	movs	r3, #10
 8001432:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001434:	2301      	movs	r3, #1
 8001436:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001438:	2310      	movs	r3, #16
 800143a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800143c:	2301      	movs	r3, #1
 800143e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4618      	mov	r0, r3
 800144a:	f001 fb99 	bl	8002b80 <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001454:	f000 fabe 	bl	80019d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	230f      	movs	r3, #15
 800145a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800146c:	f107 030c 	add.w	r3, r7, #12
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fdfc 	bl	8003070 <HAL_RCC_ClockConfig>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800147e:	f000 faa9 	bl	80019d4 <Error_Handler>
  }
}
 8001482:	bf00      	nop
 8001484:	3750      	adds	r7, #80	; 0x50
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40007000 	.word	0x40007000

08001494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <MX_I2C1_Init+0x50>)
 800149a:	4a13      	ldr	r2, [pc, #76]	; (80014e8 <MX_I2C1_Init+0x54>)
 800149c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014a0:	4a12      	ldr	r2, [pc, #72]	; (80014ec <MX_I2C1_Init+0x58>)
 80014a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014d0:	4804      	ldr	r0, [pc, #16]	; (80014e4 <MX_I2C1_Init+0x50>)
 80014d2:	f000 ff09 	bl	80022e8 <HAL_I2C_Init>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014dc:	f000 fa7a 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000124 	.word	0x20000124
 80014e8:	40005400 	.word	0x40005400
 80014ec:	000186a0 	.word	0x000186a0

080014f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014f6:	1d3b      	adds	r3, r7, #4
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001504:	2300      	movs	r3, #0
 8001506:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001508:	4b24      	ldr	r3, [pc, #144]	; (800159c <MX_RTC_Init+0xac>)
 800150a:	4a25      	ldr	r2, [pc, #148]	; (80015a0 <MX_RTC_Init+0xb0>)
 800150c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800150e:	4b23      	ldr	r3, [pc, #140]	; (800159c <MX_RTC_Init+0xac>)
 8001510:	2200      	movs	r2, #0
 8001512:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <MX_RTC_Init+0xac>)
 8001516:	227f      	movs	r2, #127	; 0x7f
 8001518:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800151a:	4b20      	ldr	r3, [pc, #128]	; (800159c <MX_RTC_Init+0xac>)
 800151c:	22ff      	movs	r2, #255	; 0xff
 800151e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001520:	4b1e      	ldr	r3, [pc, #120]	; (800159c <MX_RTC_Init+0xac>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001526:	4b1d      	ldr	r3, [pc, #116]	; (800159c <MX_RTC_Init+0xac>)
 8001528:	2200      	movs	r2, #0
 800152a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800152c:	4b1b      	ldr	r3, [pc, #108]	; (800159c <MX_RTC_Init+0xac>)
 800152e:	2200      	movs	r2, #0
 8001530:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001532:	481a      	ldr	r0, [pc, #104]	; (800159c <MX_RTC_Init+0xac>)
 8001534:	f002 f856 	bl	80035e4 <HAL_RTC_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800153e:	f000 fa49 	bl	80019d4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001542:	2300      	movs	r3, #0
 8001544:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001546:	2300      	movs	r3, #0
 8001548:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800154a:	2300      	movs	r3, #0
 800154c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	2201      	movs	r2, #1
 800155a:	4619      	mov	r1, r3
 800155c:	480f      	ldr	r0, [pc, #60]	; (800159c <MX_RTC_Init+0xac>)
 800155e:	f002 f8b7 	bl	80036d0 <HAL_RTC_SetTime>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001568:	f000 fa34 	bl	80019d4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800156c:	2301      	movs	r3, #1
 800156e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001570:	2301      	movs	r3, #1
 8001572:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001574:	2301      	movs	r3, #1
 8001576:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001578:	2300      	movs	r3, #0
 800157a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2201      	movs	r2, #1
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_RTC_Init+0xac>)
 8001584:	f002 f99c 	bl	80038c0 <HAL_RTC_SetDate>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800158e:	f000 fa21 	bl	80019d4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
  /* USER CODE END RTC_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000178 	.word	0x20000178
 80015a0:	40002800 	.word	0x40002800

080015a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
 80015b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b3a      	ldr	r3, [pc, #232]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a39      	ldr	r2, [pc, #228]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015c4:	f043 0304 	orr.w	r3, r3, #4
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b37      	ldr	r3, [pc, #220]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0304 	and.w	r3, r3, #4
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b33      	ldr	r3, [pc, #204]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a32      	ldr	r2, [pc, #200]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b30      	ldr	r3, [pc, #192]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	4b2c      	ldr	r3, [pc, #176]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4a2b      	ldr	r2, [pc, #172]	; (80016a8 <MX_GPIO_Init+0x104>)
 80015fc:	f043 0301 	orr.w	r3, r3, #1
 8001600:	6313      	str	r3, [r2, #48]	; 0x30
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <MX_GPIO_Init+0x104>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <MX_GPIO_Init+0x104>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	4a24      	ldr	r2, [pc, #144]	; (80016a8 <MX_GPIO_Init+0x104>)
 8001618:	f043 0302 	orr.w	r3, r3, #2
 800161c:	6313      	str	r3, [r2, #48]	; 0x30
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <MX_GPIO_Init+0x104>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800162a:	2200      	movs	r2, #0
 800162c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001630:	481e      	ldr	r0, [pc, #120]	; (80016ac <MX_GPIO_Init+0x108>)
 8001632:	f000 fe25 	bl	8002280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800163c:	2300      	movs	r3, #0
 800163e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4619      	mov	r1, r3
 800164a:	4819      	ldr	r0, [pc, #100]	; (80016b0 <MX_GPIO_Init+0x10c>)
 800164c:	f000 fc7c 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001650:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4810      	ldr	r0, [pc, #64]	; (80016ac <MX_GPIO_Init+0x108>)
 800166a:	f000 fc6d 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480a      	ldr	r0, [pc, #40]	; (80016ac <MX_GPIO_Init+0x108>)
 8001684:	f000 fc60 	bl	8001f48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001688:	2320      	movs	r3, #32
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_GPIO_Init+0x110>)
 800169c:	f000 fc54 	bl	8001f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020000 	.word	0x40020000
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40020400 	.word	0x40020400

080016b8 <IntToHex>:

/* USER CODE BEGIN 4 */

uint8_t IntToHex(uint8_t num){
 80016b8:	b480      	push	{r7}
 80016ba:	b08d      	sub	sp, #52	; 0x34
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	int b = num;
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	623b      	str	r3, [r7, #32]

	if (b <= 9) return b;
 80016c6:	6a3b      	ldr	r3, [r7, #32]
 80016c8:	2b09      	cmp	r3, #9
 80016ca:	dc02      	bgt.n	80016d2 <IntToHex+0x1a>
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	e092      	b.n	80017f8 <IntToHex+0x140>

	int hexd = b - (b/16)*6;
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	da00      	bge.n	80016da <IntToHex+0x22>
 80016d8:	330f      	adds	r3, #15
 80016da:	111b      	asrs	r3, r3, #4
 80016dc:	425b      	negs	r3, r3
 80016de:	461a      	mov	r2, r3
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	461a      	mov	r2, r3
 80016ea:	6a3b      	ldr	r3, [r7, #32]
 80016ec:	4413      	add	r3, r2
 80016ee:	61fb      	str	r3, [r7, #28]

	int leftover = b - (b/16)*16 + 1;
 80016f0:	6a3b      	ldr	r3, [r7, #32]
 80016f2:	425a      	negs	r2, r3
 80016f4:	f003 030f 	and.w	r3, r3, #15
 80016f8:	f002 020f 	and.w	r2, r2, #15
 80016fc:	bf58      	it	pl
 80016fe:	4253      	negpl	r3, r2
 8001700:	3301      	adds	r3, #1
 8001702:	61bb      	str	r3, [r7, #24]

	int zone = 10;
 8001704:	230a      	movs	r3, #10
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (leftover > 10) {
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0a      	cmp	r3, #10
 800170c:	dd01      	ble.n	8001712 <IntToHex+0x5a>
	    zone = 16;
 800170e:	2310      	movs	r3, #16
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
	}
	int leftL = zone - (leftover);
 8001712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]

	int dis = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	62bb      	str	r3, [r7, #40]	; 0x28
	if (leftover > 10) {
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	2b0a      	cmp	r3, #10
 8001722:	dd08      	ble.n	8001736 <IntToHex+0x7e>
	    dis = b - hexd + (6 - leftL);
 8001724:	6a3a      	ldr	r2, [r7, #32]
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	1ad2      	subs	r2, r2, r3
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	f1c3 0306 	rsb	r3, r3, #6
 8001730:	4413      	add	r3, r2
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
 8001734:	e005      	b.n	8001742 <IntToHex+0x8a>
	}
	else {
	    dis = b - hexd - leftL;
 8001736:	6a3a      	ldr	r2, [r7, #32]
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	1ad2      	subs	r2, r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	int leftR = dis - (dis/10)*10;
 8001742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001744:	4b2f      	ldr	r3, [pc, #188]	; (8001804 <IntToHex+0x14c>)
 8001746:	fb83 1302 	smull	r1, r3, r3, r2
 800174a:	1099      	asrs	r1, r3, #2
 800174c:	17d3      	asrs	r3, r2, #31
 800174e:	1ac9      	subs	r1, r1, r3
 8001750:	460b      	mov	r3, r1
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	440b      	add	r3, r1
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	613b      	str	r3, [r7, #16]

	int amount6 = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
	if (dis%10 != 0) {
 8001760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001762:	4b28      	ldr	r3, [pc, #160]	; (8001804 <IntToHex+0x14c>)
 8001764:	fb83 2301 	smull	r2, r3, r3, r1
 8001768:	109a      	asrs	r2, r3, #2
 800176a:	17cb      	asrs	r3, r1, #31
 800176c:	1ad2      	subs	r2, r2, r3
 800176e:	4613      	mov	r3, r2
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	1aca      	subs	r2, r1, r3
 8001778:	2a00      	cmp	r2, #0
 800177a:	d00c      	beq.n	8001796 <IntToHex+0xde>
	    amount6 = (dis/10)*6;
 800177c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800177e:	4a21      	ldr	r2, [pc, #132]	; (8001804 <IntToHex+0x14c>)
 8001780:	fb82 1203 	smull	r1, r2, r2, r3
 8001784:	1092      	asrs	r2, r2, #2
 8001786:	17db      	asrs	r3, r3, #31
 8001788:	1ad2      	subs	r2, r2, r3
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
 8001794:	e00c      	b.n	80017b0 <IntToHex+0xf8>
	}
	else {
	    amount6 = (dis/10 - 1)*6;
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	4a1a      	ldr	r2, [pc, #104]	; (8001804 <IntToHex+0x14c>)
 800179a:	fb82 1203 	smull	r1, r2, r2, r3
 800179e:	1092      	asrs	r2, r2, #2
 80017a0:	17db      	asrs	r3, r3, #31
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	4613      	mov	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	4413      	add	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
	}
	if (zone == 10) {
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	d102      	bne.n	80017bc <IntToHex+0x104>
	    amount6 += 6;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	3306      	adds	r3, #6
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
	}

	int amount10 = (dis/10)*10;
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	4a11      	ldr	r2, [pc, #68]	; (8001804 <IntToHex+0x14c>)
 80017c0:	fb82 1203 	smull	r1, r2, r2, r3
 80017c4:	1092      	asrs	r2, r2, #2
 80017c6:	17db      	asrs	r3, r3, #31
 80017c8:	1ad2      	subs	r2, r2, r3
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]

	return b + leftL + amount6 + amount10 + leftR;
 80017d4:	6a3b      	ldr	r3, [r7, #32]
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	4413      	add	r3, r2
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4413      	add	r3, r2
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4413      	add	r3, r2
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b2db      	uxtb	r3, r3
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3734      	adds	r7, #52	; 0x34
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	66666667 	.word	0x66666667

08001808 <SetTime>:

void SetTime(uint8_t hours, uint8_t minutes) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b088      	sub	sp, #32
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	71fb      	strb	r3, [r7, #7]
 8001814:	4613      	mov	r3, r2
 8001816:	71bb      	strb	r3, [r7, #6]
	  RTC_TimeTypeDef sTime = {0};
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 8001828:	2300      	movs	r3, #0
 800182a:	60bb      	str	r3, [r7, #8]

	  sTime.Hours = IntToHex(hours);
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff42 	bl	80016b8 <IntToHex>
 8001834:	4603      	mov	r3, r0
 8001836:	733b      	strb	r3, [r7, #12]
	  sTime.Minutes = IntToHex(minutes);
 8001838:	79bb      	ldrb	r3, [r7, #6]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ff3c 	bl	80016b8 <IntToHex>
 8001840:	4603      	mov	r3, r0
 8001842:	737b      	strb	r3, [r7, #13]
	  sTime.Seconds = 0x0;
 8001844:	2300      	movs	r3, #0
 8001846:	73bb      	strb	r3, [r7, #14]
	  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001848:	2300      	movs	r3, #0
 800184a:	61bb      	str	r3, [r7, #24]
	  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	61fb      	str	r3, [r7, #28]
	  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	2201      	movs	r2, #1
 8001856:	4619      	mov	r1, r3
 8001858:	480f      	ldr	r0, [pc, #60]	; (8001898 <SetTime+0x90>)
 800185a:	f001 ff39 	bl	80036d0 <HAL_RTC_SetTime>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SetTime+0x60>
	  {
	    Error_Handler();
 8001864:	f000 f8b6 	bl	80019d4 <Error_Handler>
	  }
	  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001868:	2301      	movs	r3, #1
 800186a:	723b      	strb	r3, [r7, #8]
	  sDate.Month = RTC_MONTH_JANUARY;
 800186c:	2301      	movs	r3, #1
 800186e:	727b      	strb	r3, [r7, #9]
	  sDate.Date = 0x1;
 8001870:	2301      	movs	r3, #1
 8001872:	72bb      	strb	r3, [r7, #10]
	  sDate.Year = 0x0;
 8001874:	2300      	movs	r3, #0
 8001876:	72fb      	strb	r3, [r7, #11]

	  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001878:	f107 0308 	add.w	r3, r7, #8
 800187c:	2201      	movs	r2, #1
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <SetTime+0x90>)
 8001882:	f002 f81d 	bl	80038c0 <HAL_RTC_SetDate>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <SetTime+0x88>
	  {
	    Error_Handler();
 800188c:	f000 f8a2 	bl	80019d4 <Error_Handler>
	  }
}
 8001890:	bf00      	nop
 8001892:	3720      	adds	r7, #32
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20000178 	.word	0x20000178

0800189c <SelectPressed>:

bool SelectPressed() {
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && SelectB) {
 80018a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a4:	480e      	ldr	r0, [pc, #56]	; (80018e0 <SelectPressed+0x44>)
 80018a6:	f000 fcd3 	bl	8002250 <HAL_GPIO_ReadPin>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d008      	beq.n	80018c2 <SelectPressed+0x26>
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <SelectPressed+0x48>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d004      	beq.n	80018c2 <SelectPressed+0x26>
		SelectB = false;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <SelectPressed+0x48>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	701a      	strb	r2, [r3, #0]
		return true;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00b      	b.n	80018da <SelectPressed+0x3e>
	}
	else if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET) {
 80018c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018c6:	4806      	ldr	r0, [pc, #24]	; (80018e0 <SelectPressed+0x44>)
 80018c8:	f000 fcc2 	bl	8002250 <HAL_GPIO_ReadPin>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d102      	bne.n	80018d8 <SelectPressed+0x3c>
		SelectB = true;
 80018d2:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <SelectPressed+0x48>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
	}
	return false;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	40020800 	.word	0x40020800
 80018e4:	200001b8 	.word	0x200001b8

080018e8 <DownPressed>:

bool DownPressed() {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) && SelectD) {
 80018ec:	2120      	movs	r1, #32
 80018ee:	480e      	ldr	r0, [pc, #56]	; (8001928 <DownPressed+0x40>)
 80018f0:	f000 fcae 	bl	8002250 <HAL_GPIO_ReadPin>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d008      	beq.n	800190c <DownPressed+0x24>
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <DownPressed+0x44>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <DownPressed+0x24>
			SelectD = false;
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <DownPressed+0x44>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
			return true;
 8001908:	2301      	movs	r3, #1
 800190a:	e00a      	b.n	8001922 <DownPressed+0x3a>
	}
	else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == GPIO_PIN_RESET) {
 800190c:	2120      	movs	r1, #32
 800190e:	4806      	ldr	r0, [pc, #24]	; (8001928 <DownPressed+0x40>)
 8001910:	f000 fc9e 	bl	8002250 <HAL_GPIO_ReadPin>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d102      	bne.n	8001920 <DownPressed+0x38>
			SelectD = true;
 800191a:	4b04      	ldr	r3, [pc, #16]	; (800192c <DownPressed+0x44>)
 800191c:	2201      	movs	r2, #1
 800191e:	701a      	strb	r2, [r3, #0]
	}
	return false;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40020400 	.word	0x40020400
 800192c:	200001b9 	.word	0x200001b9

08001930 <UpPressed>:
bool UpPressed() {
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && SelectU) {
 8001934:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001938:	480e      	ldr	r0, [pc, #56]	; (8001974 <UpPressed+0x44>)
 800193a:	f000 fc89 	bl	8002250 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d008      	beq.n	8001956 <UpPressed+0x26>
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <UpPressed+0x48>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d004      	beq.n	8001956 <UpPressed+0x26>
			SelectU = false;
 800194c:	4b0a      	ldr	r3, [pc, #40]	; (8001978 <UpPressed+0x48>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]
			return true;
 8001952:	2301      	movs	r3, #1
 8001954:	e00b      	b.n	800196e <UpPressed+0x3e>
	}
	else if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_RESET) {
 8001956:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800195a:	4806      	ldr	r0, [pc, #24]	; (8001974 <UpPressed+0x44>)
 800195c:	f000 fc78 	bl	8002250 <HAL_GPIO_ReadPin>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d102      	bne.n	800196c <UpPressed+0x3c>
			SelectU = true;
 8001966:	4b04      	ldr	r3, [pc, #16]	; (8001978 <UpPressed+0x48>)
 8001968:	2201      	movs	r2, #1
 800196a:	701a      	strb	r2, [r3, #0]
	}
	return false;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40020000 	.word	0x40020000
 8001978:	200001ba 	.word	0x200001ba

0800197c <PlaySound>:

void PlaySound(bool isHigh, bool isOn) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	460a      	mov	r2, r1
 8001986:	71fb      	strb	r3, [r7, #7]
 8001988:	4613      	mov	r3, r2
 800198a:	71bb      	strb	r3, [r7, #6]
	if (isOn) {
 800198c:	79bb      	ldrb	r3, [r7, #6]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <PlaySound+0x34>
		//D8
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8001992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001996:	480e      	ldr	r0, [pc, #56]	; (80019d0 <PlaySound+0x54>)
 8001998:	f000 fc8b 	bl	80022b2 <HAL_GPIO_TogglePin>
		if (isHigh) {
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <PlaySound+0x4c>
			//D7
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80019a2:	2201      	movs	r2, #1
 80019a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <PlaySound+0x54>)
 80019aa:	f000 fc69 	bl	8002280 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	}
}
 80019ae:	e00b      	b.n	80019c8 <PlaySound+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <PlaySound+0x54>)
 80019b8:	f000 fc62 	bl	8002280 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80019bc:	2200      	movs	r2, #0
 80019be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019c2:	4803      	ldr	r0, [pc, #12]	; (80019d0 <PlaySound+0x54>)
 80019c4:	f000 fc5c 	bl	8002280 <HAL_GPIO_WritePin>
}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40020000 	.word	0x40020000

080019d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d8:	b672      	cpsid	i
}
 80019da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019dc:	e7fe      	b.n	80019dc <Error_Handler+0x8>
	...

080019e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	607b      	str	r3, [r7, #4]
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <HAL_MspInit+0x4c>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	603b      	str	r3, [r7, #0]
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a08      	ldr	r2, [pc, #32]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_MspInit+0x4c>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800

08001a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a19      	ldr	r2, [pc, #100]	; (8001ab4 <HAL_I2C_MspInit+0x84>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d12c      	bne.n	8001aac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a17      	ldr	r2, [pc, #92]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a74:	2312      	movs	r3, #18
 8001a76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a80:	2304      	movs	r3, #4
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	480c      	ldr	r0, [pc, #48]	; (8001abc <HAL_I2C_MspInit+0x8c>)
 8001a8c:	f000 fa5c 	bl	8001f48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	4a07      	ldr	r2, [pc, #28]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001a9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_I2C_MspInit+0x88>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	; 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40005400 	.word	0x40005400
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020400 	.word	0x40020400

08001ac0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a0c      	ldr	r2, [pc, #48]	; (8001b10 <HAL_RTC_MspInit+0x50>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d111      	bne.n	8001b06 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aea:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4618      	mov	r0, r3
 8001af2:	f001 fc89 	bl	8003408 <HAL_RCCEx_PeriphCLKConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001afc:	f7ff ff6a 	bl	80019d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <HAL_RTC_MspInit+0x54>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40002800 	.word	0x40002800
 8001b14:	42470e3c 	.word	0x42470e3c

08001b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <NMI_Handler+0x4>

08001b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b22:	e7fe      	b.n	8001b22 <HardFault_Handler+0x4>

08001b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <MemManage_Handler+0x4>

08001b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b2e:	e7fe      	b.n	8001b2e <BusFault_Handler+0x4>

08001b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <UsageFault_Handler+0x4>

08001b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b64:	f000 f8c6 	bl	8001cf4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b74:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <_sbrk+0x5c>)
 8001b76:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <_sbrk+0x60>)
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b80:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <_sbrk+0x64>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d102      	bne.n	8001b8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <_sbrk+0x64>)
 8001b8a:	4a12      	ldr	r2, [pc, #72]	; (8001bd4 <_sbrk+0x68>)
 8001b8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <_sbrk+0x64>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4413      	add	r3, r2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d207      	bcs.n	8001bac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b9c:	f002 f848 	bl	8003c30 <__errno>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	220c      	movs	r2, #12
 8001ba4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8001baa:	e009      	b.n	8001bc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <_sbrk+0x64>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <_sbrk+0x64>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4413      	add	r3, r2
 8001bba:	4a05      	ldr	r2, [pc, #20]	; (8001bd0 <_sbrk+0x64>)
 8001bbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3718      	adds	r7, #24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	20018000 	.word	0x20018000
 8001bcc:	00000400 	.word	0x00000400
 8001bd0:	200001bc 	.word	0x200001bc
 8001bd4:	20000310 	.word	0x20000310

08001bd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <SystemInit+0x20>)
 8001bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001be2:	4a05      	ldr	r2, [pc, #20]	; (8001bf8 <SystemInit+0x20>)
 8001be4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bec:	bf00      	nop
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c00:	480d      	ldr	r0, [pc, #52]	; (8001c38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c02:	490e      	ldr	r1, [pc, #56]	; (8001c3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c08:	e002      	b.n	8001c10 <LoopCopyDataInit>

08001c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0e:	3304      	adds	r3, #4

08001c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c14:	d3f9      	bcc.n	8001c0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c16:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c18:	4c0b      	ldr	r4, [pc, #44]	; (8001c48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c1c:	e001      	b.n	8001c22 <LoopFillZerobss>

08001c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c20:	3204      	adds	r2, #4

08001c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c24:	d3fb      	bcc.n	8001c1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c26:	f7ff ffd7 	bl	8001bd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c2a:	f002 f807 	bl	8003c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c2e:	f7ff fb8b 	bl	8001348 <main>
  bx  lr    
 8001c32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c3c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001c40:	08004690 	.word	0x08004690
  ldr r2, =_sbss
 8001c44:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001c48:	2000030c 	.word	0x2000030c

08001c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c4c:	e7fe      	b.n	8001c4c <ADC_IRQHandler>
	...

08001c50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <HAL_Init+0x40>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <HAL_Init+0x40>)
 8001c5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_Init+0x40>)
 8001c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a07      	ldr	r2, [pc, #28]	; (8001c90 <HAL_Init+0x40>)
 8001c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	f000 f931 	bl	8001ee0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c7e:	200f      	movs	r0, #15
 8001c80:	f000 f808 	bl	8001c94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c84:	f7ff feac 	bl	80019e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023c00 	.word	0x40023c00

08001c94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <HAL_InitTick+0x54>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_InitTick+0x58>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001caa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 f93b 	bl	8001f2e <HAL_SYSTICK_Config>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00e      	b.n	8001ce0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b0f      	cmp	r3, #15
 8001cc6:	d80a      	bhi.n	8001cde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f000 f911 	bl	8001ef6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cd4:	4a06      	ldr	r2, [pc, #24]	; (8001cf0 <HAL_InitTick+0x5c>)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	e000      	b.n	8001ce0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3708      	adds	r7, #8
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000020 	.word	0x20000020
 8001cec:	20000028 	.word	0x20000028
 8001cf0:	20000024 	.word	0x20000024

08001cf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_IncTick+0x20>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_IncTick+0x24>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	4a04      	ldr	r2, [pc, #16]	; (8001d18 <HAL_IncTick+0x24>)
 8001d06:	6013      	str	r3, [r2, #0]
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20000028 	.word	0x20000028
 8001d18:	200001c0 	.word	0x200001c0

08001d1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d20:	4b03      	ldr	r3, [pc, #12]	; (8001d30 <HAL_GetTick+0x14>)
 8001d22:	681b      	ldr	r3, [r3, #0]
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	200001c0 	.word	0x200001c0

08001d34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d3c:	f7ff ffee 	bl	8001d1c <HAL_GetTick>
 8001d40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d4c:	d005      	beq.n	8001d5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_Delay+0x44>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4413      	add	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d5a:	bf00      	nop
 8001d5c:	f7ff ffde 	bl	8001d1c <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d8f7      	bhi.n	8001d5c <HAL_Delay+0x28>
  {
  }
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000028 	.word	0x20000028

08001d7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b085      	sub	sp, #20
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d92:	68ba      	ldr	r2, [r7, #8]
 8001d94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001da4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dae:	4a04      	ldr	r2, [pc, #16]	; (8001dc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	60d3      	str	r3, [r2, #12]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dc8:	4b04      	ldr	r3, [pc, #16]	; (8001ddc <__NVIC_GetPriorityGrouping+0x18>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	f003 0307 	and.w	r3, r3, #7
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	4603      	mov	r3, r0
 8001de8:	6039      	str	r1, [r7, #0]
 8001dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	db0a      	blt.n	8001e0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <__NVIC_SetPriority+0x4c>)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	0112      	lsls	r2, r2, #4
 8001e00:	b2d2      	uxtb	r2, r2
 8001e02:	440b      	add	r3, r1
 8001e04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e08:	e00a      	b.n	8001e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4908      	ldr	r1, [pc, #32]	; (8001e30 <__NVIC_SetPriority+0x50>)
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	3b04      	subs	r3, #4
 8001e18:	0112      	lsls	r2, r2, #4
 8001e1a:	b2d2      	uxtb	r2, r2
 8001e1c:	440b      	add	r3, r1
 8001e1e:	761a      	strb	r2, [r3, #24]
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000e100 	.word	0xe000e100
 8001e30:	e000ed00 	.word	0xe000ed00

08001e34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	; 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	f1c3 0307 	rsb	r3, r3, #7
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	bf28      	it	cs
 8001e52:	2304      	movcs	r3, #4
 8001e54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	3304      	adds	r3, #4
 8001e5a:	2b06      	cmp	r3, #6
 8001e5c:	d902      	bls.n	8001e64 <NVIC_EncodePriority+0x30>
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	3b03      	subs	r3, #3
 8001e62:	e000      	b.n	8001e66 <NVIC_EncodePriority+0x32>
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e68:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43da      	mvns	r2, r3
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	401a      	ands	r2, r3
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	fa01 f303 	lsl.w	r3, r1, r3
 8001e86:	43d9      	mvns	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	4313      	orrs	r3, r2
         );
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3724      	adds	r7, #36	; 0x24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eac:	d301      	bcc.n	8001eb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00f      	b.n	8001ed2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <SysTick_Config+0x40>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eba:	210f      	movs	r1, #15
 8001ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec0:	f7ff ff8e 	bl	8001de0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <SysTick_Config+0x40>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eca:	4b04      	ldr	r3, [pc, #16]	; (8001edc <SysTick_Config+0x40>)
 8001ecc:	2207      	movs	r2, #7
 8001ece:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	e000e010 	.word	0xe000e010

08001ee0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff ff47 	bl	8001d7c <__NVIC_SetPriorityGrouping>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b086      	sub	sp, #24
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	4603      	mov	r3, r0
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	607a      	str	r2, [r7, #4]
 8001f02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f04:	2300      	movs	r3, #0
 8001f06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f08:	f7ff ff5c 	bl	8001dc4 <__NVIC_GetPriorityGrouping>
 8001f0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	6978      	ldr	r0, [r7, #20]
 8001f14:	f7ff ff8e 	bl	8001e34 <NVIC_EncodePriority>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff ff5d 	bl	8001de0 <__NVIC_SetPriority>
}
 8001f26:	bf00      	nop
 8001f28:	3718      	adds	r7, #24
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b082      	sub	sp, #8
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff ffb0 	bl	8001e9c <SysTick_Config>
 8001f3c:	4603      	mov	r3, r0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61fb      	str	r3, [r7, #28]
 8001f62:	e159      	b.n	8002218 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f64:	2201      	movs	r2, #1
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	4013      	ands	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	f040 8148 	bne.w	8002212 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 0303 	and.w	r3, r3, #3
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d005      	beq.n	8001f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d130      	bne.n	8001ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001faa:	43db      	mvns	r3, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4013      	ands	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	091b      	lsrs	r3, r3, #4
 8001fe6:	f003 0201 	and.w	r2, r3, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
 8002004:	2b03      	cmp	r3, #3
 8002006:	d017      	beq.n	8002038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4313      	orrs	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d123      	bne.n	800208c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	08da      	lsrs	r2, r3, #3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3208      	adds	r2, #8
 800204c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	f003 0307 	and.w	r3, r3, #7
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43db      	mvns	r3, r3
 8002062:	69ba      	ldr	r2, [r7, #24]
 8002064:	4013      	ands	r3, r2
 8002066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0307 	and.w	r3, r3, #7
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4313      	orrs	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	08da      	lsrs	r2, r3, #3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	3208      	adds	r2, #8
 8002086:	69b9      	ldr	r1, [r7, #24]
 8002088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	69ba      	ldr	r2, [r7, #24]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a2 	beq.w	8002212 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	4b57      	ldr	r3, [pc, #348]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a56      	ldr	r2, [pc, #344]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <HAL_GPIO_Init+0x2e8>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	089b      	lsrs	r3, r3, #2
 80020f0:	3302      	adds	r3, #2
 80020f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	f003 0303 	and.w	r3, r3, #3
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	220f      	movs	r2, #15
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a49      	ldr	r2, [pc, #292]	; (8002238 <HAL_GPIO_Init+0x2f0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d019      	beq.n	800214a <HAL_GPIO_Init+0x202>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a48      	ldr	r2, [pc, #288]	; (800223c <HAL_GPIO_Init+0x2f4>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0x1fe>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a47      	ldr	r2, [pc, #284]	; (8002240 <HAL_GPIO_Init+0x2f8>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d00d      	beq.n	8002142 <HAL_GPIO_Init+0x1fa>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a46      	ldr	r2, [pc, #280]	; (8002244 <HAL_GPIO_Init+0x2fc>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d007      	beq.n	800213e <HAL_GPIO_Init+0x1f6>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a45      	ldr	r2, [pc, #276]	; (8002248 <HAL_GPIO_Init+0x300>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d101      	bne.n	800213a <HAL_GPIO_Init+0x1f2>
 8002136:	2304      	movs	r3, #4
 8002138:	e008      	b.n	800214c <HAL_GPIO_Init+0x204>
 800213a:	2307      	movs	r3, #7
 800213c:	e006      	b.n	800214c <HAL_GPIO_Init+0x204>
 800213e:	2303      	movs	r3, #3
 8002140:	e004      	b.n	800214c <HAL_GPIO_Init+0x204>
 8002142:	2302      	movs	r3, #2
 8002144:	e002      	b.n	800214c <HAL_GPIO_Init+0x204>
 8002146:	2301      	movs	r3, #1
 8002148:	e000      	b.n	800214c <HAL_GPIO_Init+0x204>
 800214a:	2300      	movs	r3, #0
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	f002 0203 	and.w	r2, r2, #3
 8002152:	0092      	lsls	r2, r2, #2
 8002154:	4093      	lsls	r3, r2
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800215c:	4935      	ldr	r1, [pc, #212]	; (8002234 <HAL_GPIO_Init+0x2ec>)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	089b      	lsrs	r3, r3, #2
 8002162:	3302      	adds	r3, #2
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800216a:	4b38      	ldr	r3, [pc, #224]	; (800224c <HAL_GPIO_Init+0x304>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d003      	beq.n	800218e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800218e:	4a2f      	ldr	r2, [pc, #188]	; (800224c <HAL_GPIO_Init+0x304>)
 8002190:	69bb      	ldr	r3, [r7, #24]
 8002192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002194:	4b2d      	ldr	r3, [pc, #180]	; (800224c <HAL_GPIO_Init+0x304>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021b8:	4a24      	ldr	r2, [pc, #144]	; (800224c <HAL_GPIO_Init+0x304>)
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021be:	4b23      	ldr	r3, [pc, #140]	; (800224c <HAL_GPIO_Init+0x304>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4013      	ands	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_GPIO_Init+0x304>)
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e8:	4b18      	ldr	r3, [pc, #96]	; (800224c <HAL_GPIO_Init+0x304>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	43db      	mvns	r3, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4013      	ands	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800220c:	4a0f      	ldr	r2, [pc, #60]	; (800224c <HAL_GPIO_Init+0x304>)
 800220e:	69bb      	ldr	r3, [r7, #24]
 8002210:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3301      	adds	r3, #1
 8002216:	61fb      	str	r3, [r7, #28]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	2b0f      	cmp	r3, #15
 800221c:	f67f aea2 	bls.w	8001f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002220:	bf00      	nop
 8002222:	bf00      	nop
 8002224:	3724      	adds	r7, #36	; 0x24
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40013c00 	.word	0x40013c00

08002250 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	460b      	mov	r3, r1
 800225a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	887b      	ldrh	r3, [r7, #2]
 8002262:	4013      	ands	r3, r2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002268:	2301      	movs	r3, #1
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e001      	b.n	8002272 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002272:	7bfb      	ldrb	r3, [r7, #15]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	460b      	mov	r3, r1
 800228a:	807b      	strh	r3, [r7, #2]
 800228c:	4613      	mov	r3, r2
 800228e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002290:	787b      	ldrb	r3, [r7, #1]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002296:	887a      	ldrh	r2, [r7, #2]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800229c:	e003      	b.n	80022a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	041a      	lsls	r2, r3, #16
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	619a      	str	r2, [r3, #24]
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	460b      	mov	r3, r1
 80022bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c4:	887a      	ldrh	r2, [r7, #2]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	4013      	ands	r3, r2
 80022ca:	041a      	lsls	r2, r3, #16
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	43d9      	mvns	r1, r3
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	400b      	ands	r3, r1
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	619a      	str	r2, [r3, #24]
}
 80022da:	bf00      	nop
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e12b      	b.n	8002552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d106      	bne.n	8002314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fb8e 	bl	8001a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	; 0x24
 8002318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0201 	bic.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800233a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800234a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800234c:	f001 f848 	bl	80033e0 <HAL_RCC_GetPCLK1Freq>
 8002350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	4a81      	ldr	r2, [pc, #516]	; (800255c <HAL_I2C_Init+0x274>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d807      	bhi.n	800236c <HAL_I2C_Init+0x84>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	4a80      	ldr	r2, [pc, #512]	; (8002560 <HAL_I2C_Init+0x278>)
 8002360:	4293      	cmp	r3, r2
 8002362:	bf94      	ite	ls
 8002364:	2301      	movls	r3, #1
 8002366:	2300      	movhi	r3, #0
 8002368:	b2db      	uxtb	r3, r3
 800236a:	e006      	b.n	800237a <HAL_I2C_Init+0x92>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4a7d      	ldr	r2, [pc, #500]	; (8002564 <HAL_I2C_Init+0x27c>)
 8002370:	4293      	cmp	r3, r2
 8002372:	bf94      	ite	ls
 8002374:	2301      	movls	r3, #1
 8002376:	2300      	movhi	r3, #0
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e0e7      	b.n	8002552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	4a78      	ldr	r2, [pc, #480]	; (8002568 <HAL_I2C_Init+0x280>)
 8002386:	fba2 2303 	umull	r2, r3, r2, r3
 800238a:	0c9b      	lsrs	r3, r3, #18
 800238c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	430a      	orrs	r2, r1
 80023a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a6a      	ldr	r2, [pc, #424]	; (800255c <HAL_I2C_Init+0x274>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d802      	bhi.n	80023bc <HAL_I2C_Init+0xd4>
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	3301      	adds	r3, #1
 80023ba:	e009      	b.n	80023d0 <HAL_I2C_Init+0xe8>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_I2C_Init+0x284>)
 80023c8:	fba2 2303 	umull	r2, r3, r2, r3
 80023cc:	099b      	lsrs	r3, r3, #6
 80023ce:	3301      	adds	r3, #1
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	495c      	ldr	r1, [pc, #368]	; (800255c <HAL_I2C_Init+0x274>)
 80023ec:	428b      	cmp	r3, r1
 80023ee:	d819      	bhi.n	8002424 <HAL_I2C_Init+0x13c>
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	1e59      	subs	r1, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80023fe:	1c59      	adds	r1, r3, #1
 8002400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002404:	400b      	ands	r3, r1
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00a      	beq.n	8002420 <HAL_I2C_Init+0x138>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e59      	subs	r1, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	fbb1 f3f3 	udiv	r3, r1, r3
 8002418:	3301      	adds	r3, #1
 800241a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241e:	e051      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 8002420:	2304      	movs	r3, #4
 8002422:	e04f      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d111      	bne.n	8002450 <HAL_I2C_Init+0x168>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	1e58      	subs	r0, r3, #1
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6859      	ldr	r1, [r3, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	2b00      	cmp	r3, #0
 8002446:	bf0c      	ite	eq
 8002448:	2301      	moveq	r3, #1
 800244a:	2300      	movne	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	e012      	b.n	8002476 <HAL_I2C_Init+0x18e>
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1e58      	subs	r0, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6859      	ldr	r1, [r3, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	440b      	add	r3, r1
 800245e:	0099      	lsls	r1, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	fbb0 f3f3 	udiv	r3, r0, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Init+0x196>
 800247a:	2301      	movs	r3, #1
 800247c:	e022      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10e      	bne.n	80024a4 <HAL_I2C_Init+0x1bc>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	1e58      	subs	r0, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	460b      	mov	r3, r1
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	440b      	add	r3, r1
 8002494:	fbb0 f3f3 	udiv	r3, r0, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024a2:	e00f      	b.n	80024c4 <HAL_I2C_Init+0x1dc>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e58      	subs	r0, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	0099      	lsls	r1, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	6809      	ldr	r1, [r1, #0]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69da      	ldr	r2, [r3, #28]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	431a      	orrs	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	6911      	ldr	r1, [r2, #16]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68d2      	ldr	r2, [r2, #12]
 80024fe:	4311      	orrs	r1, r2
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	430b      	orrs	r3, r1
 8002506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f042 0201 	orr.w	r2, r2, #1
 8002532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2220      	movs	r2, #32
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	000186a0 	.word	0x000186a0
 8002560:	001e847f 	.word	0x001e847f
 8002564:	003d08ff 	.word	0x003d08ff
 8002568:	431bde83 	.word	0x431bde83
 800256c:	10624dd3 	.word	0x10624dd3

08002570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	461a      	mov	r2, r3
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
 8002580:	4613      	mov	r3, r2
 8002582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff fbca 	bl	8001d1c <HAL_GetTick>
 8002588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	f040 80e0 	bne.w	8002758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	9300      	str	r3, [sp, #0]
 800259c:	2319      	movs	r3, #25
 800259e:	2201      	movs	r2, #1
 80025a0:	4970      	ldr	r1, [pc, #448]	; (8002764 <HAL_I2C_Master_Transmit+0x1f4>)
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 f964 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025ae:	2302      	movs	r3, #2
 80025b0:	e0d3      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_I2C_Master_Transmit+0x50>
 80025bc:	2302      	movs	r3, #2
 80025be:	e0cc      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2201      	movs	r2, #1
 80025c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d007      	beq.n	80025e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2221      	movs	r2, #33	; 0x21
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2210      	movs	r2, #16
 8002602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2200      	movs	r2, #0
 800260a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	893a      	ldrh	r2, [r7, #8]
 8002616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800261c:	b29a      	uxth	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	4a50      	ldr	r2, [pc, #320]	; (8002768 <HAL_I2C_Master_Transmit+0x1f8>)
 8002626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002628:	8979      	ldrh	r1, [r7, #10]
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	6a3a      	ldr	r2, [r7, #32]
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f000 f89c 	bl	800276c <I2C_MasterRequestWrite>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e08d      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800263e:	2300      	movs	r3, #0
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	613b      	str	r3, [r7, #16]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002654:	e066      	b.n	8002724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	6a39      	ldr	r1, [r7, #32]
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f000 f9de 	bl	8002a1c <I2C_WaitOnTXEFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	2b04      	cmp	r3, #4
 800266c:	d107      	bne.n	800267e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800267c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	781a      	ldrb	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	1c5a      	adds	r2, r3, #1
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29b      	uxth	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026aa:	3b01      	subs	r3, #1
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695b      	ldr	r3, [r3, #20]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d11b      	bne.n	80026f8 <HAL_I2C_Master_Transmit+0x188>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d017      	beq.n	80026f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	781a      	ldrb	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f0:	3b01      	subs	r3, #1
 80026f2:	b29a      	uxth	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	6a39      	ldr	r1, [r7, #32]
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f9ce 	bl	8002a9e <I2C_WaitOnBTFFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00d      	beq.n	8002724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270c:	2b04      	cmp	r3, #4
 800270e:	d107      	bne.n	8002720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800271e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e01a      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002728:	2b00      	cmp	r3, #0
 800272a:	d194      	bne.n	8002656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2220      	movs	r2, #32
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002758:	2302      	movs	r3, #2
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	00100002 	.word	0x00100002
 8002768:	ffff0000 	.word	0xffff0000

0800276c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
 8002778:	460b      	mov	r3, r1
 800277a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b08      	cmp	r3, #8
 8002786:	d006      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d003      	beq.n	8002796 <I2C_MasterRequestWrite+0x2a>
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002794:	d108      	bne.n	80027a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e00b      	b.n	80027c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	2b12      	cmp	r3, #18
 80027ae:	d107      	bne.n	80027c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027cc:	68f8      	ldr	r0, [r7, #12]
 80027ce:	f000 f84f 	bl	8002870 <I2C_WaitOnFlagUntilTimeout>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00d      	beq.n	80027f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e6:	d103      	bne.n	80027f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e035      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	691b      	ldr	r3, [r3, #16]
 80027f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027fc:	d108      	bne.n	8002810 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027fe:	897b      	ldrh	r3, [r7, #10]
 8002800:	b2db      	uxtb	r3, r3
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800280c:	611a      	str	r2, [r3, #16]
 800280e:	e01b      	b.n	8002848 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002810:	897b      	ldrh	r3, [r7, #10]
 8002812:	11db      	asrs	r3, r3, #7
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0306 	and.w	r3, r3, #6
 800281a:	b2db      	uxtb	r3, r3
 800281c:	f063 030f 	orn	r3, r3, #15
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	490e      	ldr	r1, [pc, #56]	; (8002868 <I2C_MasterRequestWrite+0xfc>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f875 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e010      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800283e:	897b      	ldrh	r3, [r7, #10]
 8002840:	b2da      	uxtb	r2, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	4907      	ldr	r1, [pc, #28]	; (800286c <I2C_MasterRequestWrite+0x100>)
 800284e:	68f8      	ldr	r0, [r7, #12]
 8002850:	f000 f865 	bl	800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3718      	adds	r7, #24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010008 	.word	0x00010008
 800286c:	00010002 	.word	0x00010002

08002870 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	603b      	str	r3, [r7, #0]
 800287c:	4613      	mov	r3, r2
 800287e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002880:	e025      	b.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002888:	d021      	beq.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800288a:	f7ff fa47 	bl	8001d1c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d302      	bcc.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d116      	bne.n	80028ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f043 0220 	orr.w	r2, r3, #32
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e023      	b.n	8002916 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	0c1b      	lsrs	r3, r3, #16
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d10d      	bne.n	80028f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	43da      	mvns	r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4013      	ands	r3, r2
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	bf0c      	ite	eq
 80028ea:	2301      	moveq	r3, #1
 80028ec:	2300      	movne	r3, #0
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	461a      	mov	r2, r3
 80028f2:	e00c      	b.n	800290e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	4013      	ands	r3, r2
 8002900:	b29b      	uxth	r3, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	bf0c      	ite	eq
 8002906:	2301      	moveq	r3, #1
 8002908:	2300      	movne	r3, #0
 800290a:	b2db      	uxtb	r3, r3
 800290c:	461a      	mov	r2, r3
 800290e:	79fb      	ldrb	r3, [r7, #7]
 8002910:	429a      	cmp	r2, r3
 8002912:	d0b6      	beq.n	8002882 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	60f8      	str	r0, [r7, #12]
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800292c:	e051      	b.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800293c:	d123      	bne.n	8002986 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002956:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	f043 0204 	orr.w	r2, r3, #4
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e046      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800298c:	d021      	beq.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800298e:	f7ff f9c5 	bl	8001d1c <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	429a      	cmp	r2, r3
 800299c:	d302      	bcc.n	80029a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d116      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	f043 0220 	orr.w	r2, r3, #32
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e020      	b.n	8002a14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	0c1b      	lsrs	r3, r3, #16
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10c      	bne.n	80029f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	43da      	mvns	r2, r3
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	4013      	ands	r3, r2
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	bf14      	ite	ne
 80029ee:	2301      	movne	r3, #1
 80029f0:	2300      	moveq	r3, #0
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	e00b      	b.n	8002a0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	699b      	ldr	r3, [r3, #24]
 80029fc:	43da      	mvns	r2, r3
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	4013      	ands	r3, r2
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	bf14      	ite	ne
 8002a08:	2301      	movne	r3, #1
 8002a0a:	2300      	moveq	r3, #0
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d18d      	bne.n	800292e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a28:	e02d      	b.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2a:	68f8      	ldr	r0, [r7, #12]
 8002a2c:	f000 f878 	bl	8002b20 <I2C_IsAcknowledgeFailed>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e02d      	b.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a40:	d021      	beq.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a42:	f7ff f96b 	bl	8001d1c <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d302      	bcc.n	8002a58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d116      	bne.n	8002a86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2220      	movs	r2, #32
 8002a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e007      	b.n	8002a96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a90:	2b80      	cmp	r3, #128	; 0x80
 8002a92:	d1ca      	bne.n	8002a2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b084      	sub	sp, #16
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	60f8      	str	r0, [r7, #12]
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aaa:	e02d      	b.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 f837 	bl	8002b20 <I2C_IsAcknowledgeFailed>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e02d      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d021      	beq.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ac4:	f7ff f92a 	bl	8001d1c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d302      	bcc.n	8002ada <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d116      	bne.n	8002b08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2220      	movs	r2, #32
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e007      	b.n	8002b18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d1ca      	bne.n	8002aac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b36:	d11b      	bne.n	8002b70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	f043 0204 	orr.w	r2, r3, #4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e000      	b.n	8002b72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b70:	2300      	movs	r3, #0
}
 8002b72:	4618      	mov	r0, r3
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
	...

08002b80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e267      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d075      	beq.n	8002c8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b9e:	4b88      	ldr	r3, [pc, #544]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	f003 030c 	and.w	r3, r3, #12
 8002ba6:	2b04      	cmp	r3, #4
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002baa:	4b85      	ldr	r3, [pc, #532]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d112      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bb6:	4b82      	ldr	r3, [pc, #520]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bc2:	d10b      	bne.n	8002bdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bc4:	4b7e      	ldr	r3, [pc, #504]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d05b      	beq.n	8002c88 <HAL_RCC_OscConfig+0x108>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d157      	bne.n	8002c88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e242      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002be4:	d106      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x74>
 8002be6:	4b76      	ldr	r3, [pc, #472]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a75      	ldr	r2, [pc, #468]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e01d      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bfc:	d10c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x98>
 8002bfe:	4b70      	ldr	r3, [pc, #448]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a6f      	ldr	r2, [pc, #444]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c08:	6013      	str	r3, [r2, #0]
 8002c0a:	4b6d      	ldr	r3, [pc, #436]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6c      	ldr	r2, [pc, #432]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c14:	6013      	str	r3, [r2, #0]
 8002c16:	e00b      	b.n	8002c30 <HAL_RCC_OscConfig+0xb0>
 8002c18:	4b69      	ldr	r3, [pc, #420]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a68      	ldr	r2, [pc, #416]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]
 8002c24:	4b66      	ldr	r3, [pc, #408]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7ff f870 	bl	8001d1c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c40:	f7ff f86c 	bl	8001d1c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b64      	cmp	r3, #100	; 0x64
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e207      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b5b      	ldr	r3, [pc, #364]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0f0      	beq.n	8002c40 <HAL_RCC_OscConfig+0xc0>
 8002c5e:	e014      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c60:	f7ff f85c 	bl	8001d1c <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c66:	e008      	b.n	8002c7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c68:	f7ff f858 	bl	8001d1c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b64      	cmp	r3, #100	; 0x64
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e1f3      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c7a:	4b51      	ldr	r3, [pc, #324]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d1f0      	bne.n	8002c68 <HAL_RCC_OscConfig+0xe8>
 8002c86:	e000      	b.n	8002c8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d063      	beq.n	8002d5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c96:	4b4a      	ldr	r3, [pc, #296]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00b      	beq.n	8002cba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ca2:	4b47      	ldr	r3, [pc, #284]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002caa:	2b08      	cmp	r3, #8
 8002cac:	d11c      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cae:	4b44      	ldr	r3, [pc, #272]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d116      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cba:	4b41      	ldr	r3, [pc, #260]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d001      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e1c7      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cd2:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	4937      	ldr	r1, [pc, #220]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ce6:	e03a      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cf0:	4b34      	ldr	r3, [pc, #208]	; (8002dc4 <HAL_RCC_OscConfig+0x244>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cf6:	f7ff f811 	bl	8001d1c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cfe:	f7ff f80d 	bl	8001d1c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e1a8      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d10:	4b2b      	ldr	r3, [pc, #172]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0f0      	beq.n	8002cfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1c:	4b28      	ldr	r3, [pc, #160]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	00db      	lsls	r3, r3, #3
 8002d2a:	4925      	ldr	r1, [pc, #148]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]
 8002d30:	e015      	b.n	8002d5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d32:	4b24      	ldr	r3, [pc, #144]	; (8002dc4 <HAL_RCC_OscConfig+0x244>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d38:	f7fe fff0 	bl	8001d1c <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d40:	f7fe ffec 	bl	8001d1c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e187      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f0      	bne.n	8002d40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0308 	and.w	r3, r3, #8
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d036      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d016      	beq.n	8002da0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d72:	4b15      	ldr	r3, [pc, #84]	; (8002dc8 <HAL_RCC_OscConfig+0x248>)
 8002d74:	2201      	movs	r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d78:	f7fe ffd0 	bl	8001d1c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d80:	f7fe ffcc 	bl	8001d1c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e167      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d92:	4b0b      	ldr	r3, [pc, #44]	; (8002dc0 <HAL_RCC_OscConfig+0x240>)
 8002d94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x200>
 8002d9e:	e01b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da0:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_OscConfig+0x248>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002da6:	f7fe ffb9 	bl	8001d1c <HAL_GetTick>
 8002daa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dac:	e00e      	b.n	8002dcc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dae:	f7fe ffb5 	bl	8001d1c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d907      	bls.n	8002dcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e150      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
 8002dc0:	40023800 	.word	0x40023800
 8002dc4:	42470000 	.word	0x42470000
 8002dc8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dcc:	4b88      	ldr	r3, [pc, #544]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dd0:	f003 0302 	and.w	r3, r3, #2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1ea      	bne.n	8002dae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	f000 8097 	beq.w	8002f14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dea:	4b81      	ldr	r3, [pc, #516]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10f      	bne.n	8002e16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b7d      	ldr	r3, [pc, #500]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a7c      	ldr	r2, [pc, #496]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b7a      	ldr	r3, [pc, #488]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e16:	4b77      	ldr	r3, [pc, #476]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d118      	bne.n	8002e54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e22:	4b74      	ldr	r3, [pc, #464]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a73      	ldr	r2, [pc, #460]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2e:	f7fe ff75 	bl	8001d1c <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e36:	f7fe ff71 	bl	8001d1c <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e10c      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e48:	4b6a      	ldr	r3, [pc, #424]	; (8002ff4 <HAL_RCC_OscConfig+0x474>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d0f0      	beq.n	8002e36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCC_OscConfig+0x2ea>
 8002e5c:	4b64      	ldr	r3, [pc, #400]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a63      	ldr	r2, [pc, #396]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
 8002e68:	e01c      	b.n	8002ea4 <HAL_RCC_OscConfig+0x324>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	2b05      	cmp	r3, #5
 8002e70:	d10c      	bne.n	8002e8c <HAL_RCC_OscConfig+0x30c>
 8002e72:	4b5f      	ldr	r3, [pc, #380]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a5e      	ldr	r2, [pc, #376]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e78:	f043 0304 	orr.w	r3, r3, #4
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a5b      	ldr	r2, [pc, #364]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0x324>
 8002e8c:	4b58      	ldr	r3, [pc, #352]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a57      	ldr	r2, [pc, #348]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e92:	f023 0301 	bic.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	4b55      	ldr	r3, [pc, #340]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4a54      	ldr	r2, [pc, #336]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 0304 	bic.w	r3, r3, #4
 8002ea2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eac:	f7fe ff36 	bl	8001d1c <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eb4:	f7fe ff32 	bl	8001d1c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e0cb      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eca:	4b49      	ldr	r3, [pc, #292]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0ee      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x334>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ed8:	f7fe ff20 	bl	8001d1c <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ede:	e00a      	b.n	8002ef6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ee0:	f7fe ff1c 	bl	8001d1c <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e0b5      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef6:	4b3e      	ldr	r3, [pc, #248]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1ee      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f02:	7dfb      	ldrb	r3, [r7, #23]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f08:	4b39      	ldr	r3, [pc, #228]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	4a38      	ldr	r2, [pc, #224]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	f000 80a1 	beq.w	8003060 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f1e:	4b34      	ldr	r3, [pc, #208]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	d05c      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d141      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f38:	f7fe fef0 	bl	8001d1c <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f40:	f7fe feec 	bl	8001d1c <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e087      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	4b27      	ldr	r3, [pc, #156]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1f0      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69da      	ldr	r2, [r3, #28]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	3b01      	subs	r3, #1
 8002f78:	041b      	lsls	r3, r3, #16
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	491b      	ldr	r1, [pc, #108]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f88:	4b1b      	ldr	r3, [pc, #108]	; (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f8e:	f7fe fec5 	bl	8001d1c <HAL_GetTick>
 8002f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f94:	e008      	b.n	8002fa8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f96:	f7fe fec1 	bl	8001d1c <HAL_GetTick>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d901      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	e05c      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fa8:	4b11      	ldr	r3, [pc, #68]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0f0      	beq.n	8002f96 <HAL_RCC_OscConfig+0x416>
 8002fb4:	e054      	b.n	8003060 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_RCC_OscConfig+0x478>)
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe feae 	bl	8001d1c <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fc4:	f7fe feaa 	bl	8001d1c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e045      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_OscConfig+0x470>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1f0      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x444>
 8002fe2:	e03d      	b.n	8003060 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d107      	bne.n	8002ffc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e038      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	40007000 	.word	0x40007000
 8002ff8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ffc:	4b1b      	ldr	r3, [pc, #108]	; (800306c <HAL_RCC_OscConfig+0x4ec>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b01      	cmp	r3, #1
 8003008:	d028      	beq.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d121      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003022:	429a      	cmp	r2, r3
 8003024:	d11a      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800302c:	4013      	ands	r3, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003032:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003034:	4293      	cmp	r3, r2
 8003036:	d111      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	3b01      	subs	r3, #1
 8003046:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003048:	429a      	cmp	r2, r3
 800304a:	d107      	bne.n	800305c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d001      	beq.n	8003060 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800

08003070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e0cc      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	429a      	cmp	r2, r3
 8003090:	d90c      	bls.n	80030ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003092:	4b65      	ldr	r3, [pc, #404]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	b2d2      	uxtb	r2, r2
 8003098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800309a:	4b63      	ldr	r3, [pc, #396]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d001      	beq.n	80030ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0b8      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d020      	beq.n	80030fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0304 	and.w	r3, r3, #4
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d005      	beq.n	80030d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030c4:	4b59      	ldr	r3, [pc, #356]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	4a58      	ldr	r2, [pc, #352]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80030ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0308 	and.w	r3, r3, #8
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d005      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030dc:	4b53      	ldr	r3, [pc, #332]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	4a52      	ldr	r2, [pc, #328]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030e8:	4b50      	ldr	r3, [pc, #320]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	494d      	ldr	r1, [pc, #308]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0301 	and.w	r3, r3, #1
 8003102:	2b00      	cmp	r3, #0
 8003104:	d044      	beq.n	8003190 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d107      	bne.n	800311e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	4b47      	ldr	r3, [pc, #284]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d119      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e07f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d003      	beq.n	800312e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800312a:	2b03      	cmp	r3, #3
 800312c:	d107      	bne.n	800313e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800312e:	4b3f      	ldr	r3, [pc, #252]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e06f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800313e:	4b3b      	ldr	r3, [pc, #236]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d101      	bne.n	800314e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e067      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800314e:	4b37      	ldr	r3, [pc, #220]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f023 0203 	bic.w	r2, r3, #3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	4934      	ldr	r1, [pc, #208]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 800315c:	4313      	orrs	r3, r2
 800315e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003160:	f7fe fddc 	bl	8001d1c <HAL_GetTick>
 8003164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003166:	e00a      	b.n	800317e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003168:	f7fe fdd8 	bl	8001d1c <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	f241 3288 	movw	r2, #5000	; 0x1388
 8003176:	4293      	cmp	r3, r2
 8003178:	d901      	bls.n	800317e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e04f      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800317e:	4b2b      	ldr	r3, [pc, #172]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 020c 	and.w	r2, r3, #12
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	429a      	cmp	r2, r3
 800318e:	d1eb      	bne.n	8003168 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003190:	4b25      	ldr	r3, [pc, #148]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d20c      	bcs.n	80031b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b20      	ldr	r3, [pc, #128]	; (8003228 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e032      	b.n	800321e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0304 	and.w	r3, r3, #4
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031c4:	4b19      	ldr	r3, [pc, #100]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	4916      	ldr	r1, [pc, #88]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d009      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031e2:	4b12      	ldr	r3, [pc, #72]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691b      	ldr	r3, [r3, #16]
 80031ee:	00db      	lsls	r3, r3, #3
 80031f0:	490e      	ldr	r1, [pc, #56]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031f6:	f000 f821 	bl	800323c <HAL_RCC_GetSysClockFreq>
 80031fa:	4602      	mov	r2, r0
 80031fc:	4b0b      	ldr	r3, [pc, #44]	; (800322c <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 030f 	and.w	r3, r3, #15
 8003206:	490a      	ldr	r1, [pc, #40]	; (8003230 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	5ccb      	ldrb	r3, [r1, r3]
 800320a:	fa22 f303 	lsr.w	r3, r2, r3
 800320e:	4a09      	ldr	r2, [pc, #36]	; (8003234 <HAL_RCC_ClockConfig+0x1c4>)
 8003210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_RCC_ClockConfig+0x1c8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7fe fd3c 	bl	8001c94 <HAL_InitTick>

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40023c00 	.word	0x40023c00
 800322c:	40023800 	.word	0x40023800
 8003230:	08004634 	.word	0x08004634
 8003234:	20000020 	.word	0x20000020
 8003238:	20000024 	.word	0x20000024

0800323c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800323c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003240:	b090      	sub	sp, #64	; 0x40
 8003242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
 8003248:	2300      	movs	r3, #0
 800324a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800324c:	2300      	movs	r3, #0
 800324e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003250:	2300      	movs	r3, #0
 8003252:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003254:	4b59      	ldr	r3, [pc, #356]	; (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 030c 	and.w	r3, r3, #12
 800325c:	2b08      	cmp	r3, #8
 800325e:	d00d      	beq.n	800327c <HAL_RCC_GetSysClockFreq+0x40>
 8003260:	2b08      	cmp	r3, #8
 8003262:	f200 80a1 	bhi.w	80033a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003266:	2b00      	cmp	r3, #0
 8003268:	d002      	beq.n	8003270 <HAL_RCC_GetSysClockFreq+0x34>
 800326a:	2b04      	cmp	r3, #4
 800326c:	d003      	beq.n	8003276 <HAL_RCC_GetSysClockFreq+0x3a>
 800326e:	e09b      	b.n	80033a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003270:	4b53      	ldr	r3, [pc, #332]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003272:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003274:	e09b      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003276:	4b53      	ldr	r3, [pc, #332]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003278:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800327a:	e098      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003286:	4b4d      	ldr	r3, [pc, #308]	; (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d028      	beq.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b4a      	ldr	r3, [pc, #296]	; (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	2200      	movs	r2, #0
 800329a:	623b      	str	r3, [r7, #32]
 800329c:	627a      	str	r2, [r7, #36]	; 0x24
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80032a4:	2100      	movs	r1, #0
 80032a6:	4b47      	ldr	r3, [pc, #284]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032a8:	fb03 f201 	mul.w	r2, r3, r1
 80032ac:	2300      	movs	r3, #0
 80032ae:	fb00 f303 	mul.w	r3, r0, r3
 80032b2:	4413      	add	r3, r2
 80032b4:	4a43      	ldr	r2, [pc, #268]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80032b6:	fba0 1202 	umull	r1, r2, r0, r2
 80032ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80032bc:	460a      	mov	r2, r1
 80032be:	62ba      	str	r2, [r7, #40]	; 0x28
 80032c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c2:	4413      	add	r3, r2
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032c8:	2200      	movs	r2, #0
 80032ca:	61bb      	str	r3, [r7, #24]
 80032cc:	61fa      	str	r2, [r7, #28]
 80032ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80032d6:	f7fc ffd3 	bl	8000280 <__aeabi_uldivmod>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	4613      	mov	r3, r2
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e2:	e053      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	2200      	movs	r2, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	617a      	str	r2, [r7, #20]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032f6:	f04f 0b00 	mov.w	fp, #0
 80032fa:	4652      	mov	r2, sl
 80032fc:	465b      	mov	r3, fp
 80032fe:	f04f 0000 	mov.w	r0, #0
 8003302:	f04f 0100 	mov.w	r1, #0
 8003306:	0159      	lsls	r1, r3, #5
 8003308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800330c:	0150      	lsls	r0, r2, #5
 800330e:	4602      	mov	r2, r0
 8003310:	460b      	mov	r3, r1
 8003312:	ebb2 080a 	subs.w	r8, r2, sl
 8003316:	eb63 090b 	sbc.w	r9, r3, fp
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003326:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800332a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800332e:	ebb2 0408 	subs.w	r4, r2, r8
 8003332:	eb63 0509 	sbc.w	r5, r3, r9
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	f04f 0300 	mov.w	r3, #0
 800333e:	00eb      	lsls	r3, r5, #3
 8003340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003344:	00e2      	lsls	r2, r4, #3
 8003346:	4614      	mov	r4, r2
 8003348:	461d      	mov	r5, r3
 800334a:	eb14 030a 	adds.w	r3, r4, sl
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	eb45 030b 	adc.w	r3, r5, fp
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	f04f 0200 	mov.w	r2, #0
 800335a:	f04f 0300 	mov.w	r3, #0
 800335e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003362:	4629      	mov	r1, r5
 8003364:	028b      	lsls	r3, r1, #10
 8003366:	4621      	mov	r1, r4
 8003368:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800336c:	4621      	mov	r1, r4
 800336e:	028a      	lsls	r2, r1, #10
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003376:	2200      	movs	r2, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	60fa      	str	r2, [r7, #12]
 800337c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003380:	f7fc ff7e 	bl	8000280 <__aeabi_uldivmod>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_GetSysClockFreq+0x180>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	0c1b      	lsrs	r3, r3, #16
 8003392:	f003 0303 	and.w	r3, r3, #3
 8003396:	3301      	adds	r3, #1
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800339c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033a6:	e002      	b.n	80033ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80033aa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3740      	adds	r7, #64	; 0x40
 80033b4:	46bd      	mov	sp, r7
 80033b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ba:	bf00      	nop
 80033bc:	40023800 	.word	0x40023800
 80033c0:	00f42400 	.word	0x00f42400
 80033c4:	017d7840 	.word	0x017d7840

080033c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033cc:	4b03      	ldr	r3, [pc, #12]	; (80033dc <HAL_RCC_GetHCLKFreq+0x14>)
 80033ce:	681b      	ldr	r3, [r3, #0]
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
 80033da:	bf00      	nop
 80033dc:	20000020 	.word	0x20000020

080033e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80033e4:	f7ff fff0 	bl	80033c8 <HAL_RCC_GetHCLKFreq>
 80033e8:	4602      	mov	r2, r0
 80033ea:	4b05      	ldr	r3, [pc, #20]	; (8003400 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	4903      	ldr	r1, [pc, #12]	; (8003404 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033f6:	5ccb      	ldrb	r3, [r1, r3]
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40023800 	.word	0x40023800
 8003404:	08004644 	.word	0x08004644

08003408 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b00      	cmp	r3, #0
 8003422:	d105      	bne.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800342c:	2b00      	cmp	r3, #0
 800342e:	d035      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003430:	4b67      	ldr	r3, [pc, #412]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003432:	2200      	movs	r2, #0
 8003434:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003436:	f7fe fc71 	bl	8001d1c <HAL_GetTick>
 800343a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800343c:	e008      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800343e:	f7fe fc6d 	bl	8001d1c <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0ba      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003450:	4b60      	ldr	r3, [pc, #384]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	019a      	lsls	r2, r3, #6
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	071b      	lsls	r3, r3, #28
 8003468:	495a      	ldr	r1, [pc, #360]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003470:	4b57      	ldr	r3, [pc, #348]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003476:	f7fe fc51 	bl	8001d1c <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800347e:	f7fe fc4d 	bl	8001d1c <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e09a      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8083 	beq.w	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b49      	ldr	r3, [pc, #292]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	4a48      	ldr	r2, [pc, #288]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ba:	4b46      	ldr	r3, [pc, #280]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034c6:	4b44      	ldr	r3, [pc, #272]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a43      	ldr	r2, [pc, #268]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034d2:	f7fe fc23 	bl	8001d1c <HAL_GetTick>
 80034d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034d8:	e008      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034da:	f7fe fc1f 	bl	8001d1c <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d901      	bls.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e06c      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80034ec:	4b3a      	ldr	r3, [pc, #232]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d0f0      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f8:	4b36      	ldr	r3, [pc, #216]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80034fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003500:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d02f      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003510:	693a      	ldr	r2, [r7, #16]
 8003512:	429a      	cmp	r2, r3
 8003514:	d028      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003516:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003520:	4b2e      	ldr	r3, [pc, #184]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003522:	2201      	movs	r2, #1
 8003524:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003526:	4b2d      	ldr	r3, [pc, #180]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003528:	2200      	movs	r2, #0
 800352a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800352c:	4a29      	ldr	r2, [pc, #164]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003532:	4b28      	ldr	r3, [pc, #160]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d114      	bne.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fbed 	bl	8001d1c <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003544:	e00a      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003546:	f7fe fbe9 	bl	8001d1c <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f241 3288 	movw	r2, #5000	; 0x1388
 8003554:	4293      	cmp	r3, r2
 8003556:	d901      	bls.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e034      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d0ee      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003574:	d10d      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003576:	4b17      	ldr	r3, [pc, #92]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800358a:	4912      	ldr	r1, [pc, #72]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800358c:	4313      	orrs	r3, r2
 800358e:	608b      	str	r3, [r1, #8]
 8003590:	e005      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	4a0f      	ldr	r2, [pc, #60]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003598:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800359c:	6093      	str	r3, [r2, #8]
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035aa:	490a      	ldr	r1, [pc, #40]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	7c1a      	ldrb	r2, [r3, #16]
 80035c0:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80035c2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	42470068 	.word	0x42470068
 80035d4:	40023800 	.word	0x40023800
 80035d8:	40007000 	.word	0x40007000
 80035dc:	42470e40 	.word	0x42470e40
 80035e0:	424711e0 	.word	0x424711e0

080035e4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e066      	b.n	80036c8 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	7f5b      	ldrb	r3, [r3, #29]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	d105      	bne.n	8003610 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7fe fa58 	bl	8001ac0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	22ca      	movs	r2, #202	; 0xca
 800361c:	625a      	str	r2, [r3, #36]	; 0x24
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2253      	movs	r2, #83	; 0x53
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 fa45 	bl	8003ab6 <RTC_EnterInitMode>
 800362c:	4603      	mov	r3, r0
 800362e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003630:	7bfb      	ldrb	r3, [r7, #15]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d12c      	bne.n	8003690 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6812      	ldr	r2, [r2, #0]
 8003640:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003644:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003648:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6899      	ldr	r1, [r3, #8]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68d2      	ldr	r2, [r2, #12]
 8003670:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6919      	ldr	r1, [r3, #16]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fa4c 	bl	8003b24 <RTC_ExitInitMode>
 800368c:	4603      	mov	r3, r0
 800368e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003690:	7bfb      	ldrb	r3, [r7, #15]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d113      	bne.n	80036be <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036a4:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699a      	ldr	r2, [r3, #24]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	22ff      	movs	r2, #255	; 0xff
 80036c4:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80036c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80036d0:	b590      	push	{r4, r7, lr}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	7f1b      	ldrb	r3, [r3, #28]
 80036e4:	2b01      	cmp	r3, #1
 80036e6:	d101      	bne.n	80036ec <HAL_RTC_SetTime+0x1c>
 80036e8:	2302      	movs	r3, #2
 80036ea:	e087      	b.n	80037fc <HAL_RTC_SetTime+0x12c>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2202      	movs	r2, #2
 80036f6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d126      	bne.n	800374c <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003708:	2b00      	cmp	r3, #0
 800370a:	d102      	bne.n	8003712 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	2200      	movs	r2, #0
 8003710:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fa29 	bl	8003b6e <RTC_ByteToBcd2>
 800371c:	4603      	mov	r3, r0
 800371e:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	785b      	ldrb	r3, [r3, #1]
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fa22 	bl	8003b6e <RTC_ByteToBcd2>
 800372a:	4603      	mov	r3, r0
 800372c:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800372e:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	789b      	ldrb	r3, [r3, #2]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 fa1a 	bl	8003b6e <RTC_ByteToBcd2>
 800373a:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800373c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	78db      	ldrb	r3, [r3, #3]
 8003744:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003746:	4313      	orrs	r3, r2
 8003748:	617b      	str	r3, [r7, #20]
 800374a:	e018      	b.n	800377e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2200      	movs	r2, #0
 800375e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	785b      	ldrb	r3, [r3, #1]
 800376a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800376c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003772:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	78db      	ldrb	r3, [r3, #3]
 8003778:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800377a:	4313      	orrs	r3, r2
 800377c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	22ca      	movs	r2, #202	; 0xca
 8003784:	625a      	str	r2, [r3, #36]	; 0x24
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2253      	movs	r2, #83	; 0x53
 800378c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 f991 	bl	8003ab6 <RTC_EnterInitMode>
 8003794:	4603      	mov	r3, r0
 8003796:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003798:	7cfb      	ldrb	r3, [r7, #19]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d120      	bne.n	80037e0 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80037a8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80037ac:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80037bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6899      	ldr	r1, [r3, #8]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	431a      	orrs	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f9a4 	bl	8003b24 <RTC_ExitInitMode>
 80037dc:	4603      	mov	r3, r0
 80037de:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037e0:	7cfb      	ldrb	r3, [r7, #19]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2201      	movs	r2, #1
 80037ea:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	771a      	strb	r2, [r3, #28]

  return status;
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	bd90      	pop	{r4, r7, pc}

08003804 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003810:	2300      	movs	r3, #0
 8003812:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003836:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800383a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	0c1b      	lsrs	r3, r3, #16
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	0a1b      	lsrs	r3, r3, #8
 8003850:	b2db      	uxtb	r3, r3
 8003852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	b2db      	uxtb	r3, r3
 8003860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	0d9b      	lsrs	r3, r3, #22
 800386e:	b2db      	uxtb	r3, r3
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d11a      	bne.n	80038b6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f98f 	bl	8003ba8 <RTC_Bcd2ToByte>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	785b      	ldrb	r3, [r3, #1]
 8003896:	4618      	mov	r0, r3
 8003898:	f000 f986 	bl	8003ba8 <RTC_Bcd2ToByte>
 800389c:	4603      	mov	r3, r0
 800389e:	461a      	mov	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	789b      	ldrb	r3, [r3, #2]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 f97d 	bl	8003ba8 <RTC_Bcd2ToByte>
 80038ae:	4603      	mov	r3, r0
 80038b0:	461a      	mov	r2, r3
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	60f8      	str	r0, [r7, #12]
 80038c8:	60b9      	str	r1, [r7, #8]
 80038ca:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	7f1b      	ldrb	r3, [r3, #28]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d101      	bne.n	80038dc <HAL_RTC_SetDate+0x1c>
 80038d8:	2302      	movs	r3, #2
 80038da:	e071      	b.n	80039c0 <HAL_RTC_SetDate+0x100>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2201      	movs	r2, #1
 80038e0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10e      	bne.n	800390c <HAL_RTC_SetDate+0x4c>
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	785b      	ldrb	r3, [r3, #1]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	785b      	ldrb	r3, [r3, #1]
 80038fe:	f023 0310 	bic.w	r3, r3, #16
 8003902:	b2db      	uxtb	r3, r3
 8003904:	330a      	adds	r3, #10
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11c      	bne.n	800394c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	78db      	ldrb	r3, [r3, #3]
 8003916:	4618      	mov	r0, r3
 8003918:	f000 f929 	bl	8003b6e <RTC_ByteToBcd2>
 800391c:	4603      	mov	r3, r0
 800391e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	785b      	ldrb	r3, [r3, #1]
 8003924:	4618      	mov	r0, r3
 8003926:	f000 f922 	bl	8003b6e <RTC_ByteToBcd2>
 800392a:	4603      	mov	r3, r0
 800392c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800392e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	789b      	ldrb	r3, [r3, #2]
 8003934:	4618      	mov	r0, r3
 8003936:	f000 f91a 	bl	8003b6e <RTC_ByteToBcd2>
 800393a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800393c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
 800394a:	e00e      	b.n	800396a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	78db      	ldrb	r3, [r3, #3]
 8003950:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	785b      	ldrb	r3, [r3, #1]
 8003956:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003958:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800395e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003966:	4313      	orrs	r3, r2
 8003968:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	22ca      	movs	r2, #202	; 0xca
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2253      	movs	r2, #83	; 0x53
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 f89b 	bl	8003ab6 <RTC_EnterInitMode>
 8003980:	4603      	mov	r3, r0
 8003982:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003984:	7cfb      	ldrb	r3, [r7, #19]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10c      	bne.n	80039a4 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003994:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003998:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f8c2 	bl	8003b24 <RTC_ExitInitMode>
 80039a0:	4603      	mov	r3, r0
 80039a2:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d102      	bne.n	80039b0 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	22ff      	movs	r2, #255	; 0xff
 80039b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	771a      	strb	r2, [r3, #28]

  return status;
 80039be:	7cfb      	ldrb	r3, [r7, #19]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	371c      	adds	r7, #28
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd90      	pop	{r4, r7, pc}

080039c8 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	60b9      	str	r1, [r7, #8]
 80039d2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039e2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	0c1b      	lsrs	r3, r3, #16
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	0b5b      	lsrs	r3, r3, #13
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11a      	bne.n	8003a5c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	78db      	ldrb	r3, [r3, #3]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f000 f8bc 	bl	8003ba8 <RTC_Bcd2ToByte>
 8003a30:	4603      	mov	r3, r0
 8003a32:	461a      	mov	r2, r3
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	785b      	ldrb	r3, [r3, #1]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 f8b3 	bl	8003ba8 <RTC_Bcd2ToByte>
 8003a42:	4603      	mov	r3, r0
 8003a44:	461a      	mov	r2, r3
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f8aa 	bl	8003ba8 <RTC_Bcd2ToByte>
 8003a54:	4603      	mov	r3, r0
 8003a56:	461a      	mov	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b084      	sub	sp, #16
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	68da      	ldr	r2, [r3, #12]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a80:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003a82:	f7fe f94b 	bl	8001d1c <HAL_GetTick>
 8003a86:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a88:	e009      	b.n	8003a9e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003a8a:	f7fe f947 	bl	8001d1c <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a98:	d901      	bls.n	8003a9e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e007      	b.n	8003aae <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d0ee      	beq.n	8003a8a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d122      	bne.n	8003b1a <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ae2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae4:	f7fe f91a 	bl	8001d1c <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003aea:	e00c      	b.n	8003b06 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003aec:	f7fe f916 	bl	8001d1c <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003afa:	d904      	bls.n	8003b06 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2204      	movs	r2, #4
 8003b00:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d102      	bne.n	8003b1a <RTC_EnterInitMode+0x64>
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d1e8      	bne.n	8003aec <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b084      	sub	sp, #16
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b3e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7ff ff89 	bl	8003a66 <HAL_RTC_WaitForSynchro>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d004      	beq.n	8003b64 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2204      	movs	r2, #4
 8003b5e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b085      	sub	sp, #20
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8003b7c:	e005      	b.n	8003b8a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	3301      	adds	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003b84:	79fb      	ldrb	r3, [r7, #7]
 8003b86:	3b0a      	subs	r3, #10
 8003b88:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	2b09      	cmp	r3, #9
 8003b8e:	d8f6      	bhi.n	8003b7e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	79fb      	ldrb	r3, [r7, #7]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	b2db      	uxtb	r3, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	4603      	mov	r3, r0
 8003bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003bb6:	79fb      	ldrb	r3, [r7, #7]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	0092      	lsls	r2, r2, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003bc6:	79fb      	ldrb	r3, [r7, #7]
 8003bc8:	f003 030f 	and.w	r3, r3, #15
 8003bcc:	b2da      	uxtb	r2, r3
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	b2db      	uxtb	r3, r3
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3714      	adds	r7, #20
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <siprintf>:
 8003be0:	b40e      	push	{r1, r2, r3}
 8003be2:	b500      	push	{lr}
 8003be4:	b09c      	sub	sp, #112	; 0x70
 8003be6:	ab1d      	add	r3, sp, #116	; 0x74
 8003be8:	9002      	str	r0, [sp, #8]
 8003bea:	9006      	str	r0, [sp, #24]
 8003bec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bf0:	4809      	ldr	r0, [pc, #36]	; (8003c18 <siprintf+0x38>)
 8003bf2:	9107      	str	r1, [sp, #28]
 8003bf4:	9104      	str	r1, [sp, #16]
 8003bf6:	4909      	ldr	r1, [pc, #36]	; (8003c1c <siprintf+0x3c>)
 8003bf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8003bfc:	9105      	str	r1, [sp, #20]
 8003bfe:	6800      	ldr	r0, [r0, #0]
 8003c00:	9301      	str	r3, [sp, #4]
 8003c02:	a902      	add	r1, sp, #8
 8003c04:	f000 f99a 	bl	8003f3c <_svfiprintf_r>
 8003c08:	9b02      	ldr	r3, [sp, #8]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	b01c      	add	sp, #112	; 0x70
 8003c10:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c14:	b003      	add	sp, #12
 8003c16:	4770      	bx	lr
 8003c18:	20000078 	.word	0x20000078
 8003c1c:	ffff0208 	.word	0xffff0208

08003c20 <memset>:
 8003c20:	4402      	add	r2, r0
 8003c22:	4603      	mov	r3, r0
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d100      	bne.n	8003c2a <memset+0xa>
 8003c28:	4770      	bx	lr
 8003c2a:	f803 1b01 	strb.w	r1, [r3], #1
 8003c2e:	e7f9      	b.n	8003c24 <memset+0x4>

08003c30 <__errno>:
 8003c30:	4b01      	ldr	r3, [pc, #4]	; (8003c38 <__errno+0x8>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000078 	.word	0x20000078

08003c3c <__libc_init_array>:
 8003c3c:	b570      	push	{r4, r5, r6, lr}
 8003c3e:	4d0d      	ldr	r5, [pc, #52]	; (8003c74 <__libc_init_array+0x38>)
 8003c40:	4c0d      	ldr	r4, [pc, #52]	; (8003c78 <__libc_init_array+0x3c>)
 8003c42:	1b64      	subs	r4, r4, r5
 8003c44:	10a4      	asrs	r4, r4, #2
 8003c46:	2600      	movs	r6, #0
 8003c48:	42a6      	cmp	r6, r4
 8003c4a:	d109      	bne.n	8003c60 <__libc_init_array+0x24>
 8003c4c:	4d0b      	ldr	r5, [pc, #44]	; (8003c7c <__libc_init_array+0x40>)
 8003c4e:	4c0c      	ldr	r4, [pc, #48]	; (8003c80 <__libc_init_array+0x44>)
 8003c50:	f000 fc72 	bl	8004538 <_init>
 8003c54:	1b64      	subs	r4, r4, r5
 8003c56:	10a4      	asrs	r4, r4, #2
 8003c58:	2600      	movs	r6, #0
 8003c5a:	42a6      	cmp	r6, r4
 8003c5c:	d105      	bne.n	8003c6a <__libc_init_array+0x2e>
 8003c5e:	bd70      	pop	{r4, r5, r6, pc}
 8003c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c64:	4798      	blx	r3
 8003c66:	3601      	adds	r6, #1
 8003c68:	e7ee      	b.n	8003c48 <__libc_init_array+0xc>
 8003c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c6e:	4798      	blx	r3
 8003c70:	3601      	adds	r6, #1
 8003c72:	e7f2      	b.n	8003c5a <__libc_init_array+0x1e>
 8003c74:	08004688 	.word	0x08004688
 8003c78:	08004688 	.word	0x08004688
 8003c7c:	08004688 	.word	0x08004688
 8003c80:	0800468c 	.word	0x0800468c

08003c84 <__retarget_lock_acquire_recursive>:
 8003c84:	4770      	bx	lr

08003c86 <__retarget_lock_release_recursive>:
 8003c86:	4770      	bx	lr

08003c88 <strcpy>:
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c8e:	f803 2b01 	strb.w	r2, [r3], #1
 8003c92:	2a00      	cmp	r2, #0
 8003c94:	d1f9      	bne.n	8003c8a <strcpy+0x2>
 8003c96:	4770      	bx	lr

08003c98 <_free_r>:
 8003c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c9a:	2900      	cmp	r1, #0
 8003c9c:	d044      	beq.n	8003d28 <_free_r+0x90>
 8003c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ca2:	9001      	str	r0, [sp, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8003caa:	bfb8      	it	lt
 8003cac:	18e4      	addlt	r4, r4, r3
 8003cae:	f000 f8df 	bl	8003e70 <__malloc_lock>
 8003cb2:	4a1e      	ldr	r2, [pc, #120]	; (8003d2c <_free_r+0x94>)
 8003cb4:	9801      	ldr	r0, [sp, #4]
 8003cb6:	6813      	ldr	r3, [r2, #0]
 8003cb8:	b933      	cbnz	r3, 8003cc8 <_free_r+0x30>
 8003cba:	6063      	str	r3, [r4, #4]
 8003cbc:	6014      	str	r4, [r2, #0]
 8003cbe:	b003      	add	sp, #12
 8003cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003cc4:	f000 b8da 	b.w	8003e7c <__malloc_unlock>
 8003cc8:	42a3      	cmp	r3, r4
 8003cca:	d908      	bls.n	8003cde <_free_r+0x46>
 8003ccc:	6825      	ldr	r5, [r4, #0]
 8003cce:	1961      	adds	r1, r4, r5
 8003cd0:	428b      	cmp	r3, r1
 8003cd2:	bf01      	itttt	eq
 8003cd4:	6819      	ldreq	r1, [r3, #0]
 8003cd6:	685b      	ldreq	r3, [r3, #4]
 8003cd8:	1949      	addeq	r1, r1, r5
 8003cda:	6021      	streq	r1, [r4, #0]
 8003cdc:	e7ed      	b.n	8003cba <_free_r+0x22>
 8003cde:	461a      	mov	r2, r3
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	b10b      	cbz	r3, 8003ce8 <_free_r+0x50>
 8003ce4:	42a3      	cmp	r3, r4
 8003ce6:	d9fa      	bls.n	8003cde <_free_r+0x46>
 8003ce8:	6811      	ldr	r1, [r2, #0]
 8003cea:	1855      	adds	r5, r2, r1
 8003cec:	42a5      	cmp	r5, r4
 8003cee:	d10b      	bne.n	8003d08 <_free_r+0x70>
 8003cf0:	6824      	ldr	r4, [r4, #0]
 8003cf2:	4421      	add	r1, r4
 8003cf4:	1854      	adds	r4, r2, r1
 8003cf6:	42a3      	cmp	r3, r4
 8003cf8:	6011      	str	r1, [r2, #0]
 8003cfa:	d1e0      	bne.n	8003cbe <_free_r+0x26>
 8003cfc:	681c      	ldr	r4, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	6053      	str	r3, [r2, #4]
 8003d02:	440c      	add	r4, r1
 8003d04:	6014      	str	r4, [r2, #0]
 8003d06:	e7da      	b.n	8003cbe <_free_r+0x26>
 8003d08:	d902      	bls.n	8003d10 <_free_r+0x78>
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	6003      	str	r3, [r0, #0]
 8003d0e:	e7d6      	b.n	8003cbe <_free_r+0x26>
 8003d10:	6825      	ldr	r5, [r4, #0]
 8003d12:	1961      	adds	r1, r4, r5
 8003d14:	428b      	cmp	r3, r1
 8003d16:	bf04      	itt	eq
 8003d18:	6819      	ldreq	r1, [r3, #0]
 8003d1a:	685b      	ldreq	r3, [r3, #4]
 8003d1c:	6063      	str	r3, [r4, #4]
 8003d1e:	bf04      	itt	eq
 8003d20:	1949      	addeq	r1, r1, r5
 8003d22:	6021      	streq	r1, [r4, #0]
 8003d24:	6054      	str	r4, [r2, #4]
 8003d26:	e7ca      	b.n	8003cbe <_free_r+0x26>
 8003d28:	b003      	add	sp, #12
 8003d2a:	bd30      	pop	{r4, r5, pc}
 8003d2c:	20000304 	.word	0x20000304

08003d30 <sbrk_aligned>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4e0e      	ldr	r6, [pc, #56]	; (8003d6c <sbrk_aligned+0x3c>)
 8003d34:	460c      	mov	r4, r1
 8003d36:	6831      	ldr	r1, [r6, #0]
 8003d38:	4605      	mov	r5, r0
 8003d3a:	b911      	cbnz	r1, 8003d42 <sbrk_aligned+0x12>
 8003d3c:	f000 fba6 	bl	800448c <_sbrk_r>
 8003d40:	6030      	str	r0, [r6, #0]
 8003d42:	4621      	mov	r1, r4
 8003d44:	4628      	mov	r0, r5
 8003d46:	f000 fba1 	bl	800448c <_sbrk_r>
 8003d4a:	1c43      	adds	r3, r0, #1
 8003d4c:	d00a      	beq.n	8003d64 <sbrk_aligned+0x34>
 8003d4e:	1cc4      	adds	r4, r0, #3
 8003d50:	f024 0403 	bic.w	r4, r4, #3
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d007      	beq.n	8003d68 <sbrk_aligned+0x38>
 8003d58:	1a21      	subs	r1, r4, r0
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	f000 fb96 	bl	800448c <_sbrk_r>
 8003d60:	3001      	adds	r0, #1
 8003d62:	d101      	bne.n	8003d68 <sbrk_aligned+0x38>
 8003d64:	f04f 34ff 	mov.w	r4, #4294967295
 8003d68:	4620      	mov	r0, r4
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	20000308 	.word	0x20000308

08003d70 <_malloc_r>:
 8003d70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d74:	1ccd      	adds	r5, r1, #3
 8003d76:	f025 0503 	bic.w	r5, r5, #3
 8003d7a:	3508      	adds	r5, #8
 8003d7c:	2d0c      	cmp	r5, #12
 8003d7e:	bf38      	it	cc
 8003d80:	250c      	movcc	r5, #12
 8003d82:	2d00      	cmp	r5, #0
 8003d84:	4607      	mov	r7, r0
 8003d86:	db01      	blt.n	8003d8c <_malloc_r+0x1c>
 8003d88:	42a9      	cmp	r1, r5
 8003d8a:	d905      	bls.n	8003d98 <_malloc_r+0x28>
 8003d8c:	230c      	movs	r3, #12
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	2600      	movs	r6, #0
 8003d92:	4630      	mov	r0, r6
 8003d94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e6c <_malloc_r+0xfc>
 8003d9c:	f000 f868 	bl	8003e70 <__malloc_lock>
 8003da0:	f8d8 3000 	ldr.w	r3, [r8]
 8003da4:	461c      	mov	r4, r3
 8003da6:	bb5c      	cbnz	r4, 8003e00 <_malloc_r+0x90>
 8003da8:	4629      	mov	r1, r5
 8003daa:	4638      	mov	r0, r7
 8003dac:	f7ff ffc0 	bl	8003d30 <sbrk_aligned>
 8003db0:	1c43      	adds	r3, r0, #1
 8003db2:	4604      	mov	r4, r0
 8003db4:	d155      	bne.n	8003e62 <_malloc_r+0xf2>
 8003db6:	f8d8 4000 	ldr.w	r4, [r8]
 8003dba:	4626      	mov	r6, r4
 8003dbc:	2e00      	cmp	r6, #0
 8003dbe:	d145      	bne.n	8003e4c <_malloc_r+0xdc>
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d048      	beq.n	8003e56 <_malloc_r+0xe6>
 8003dc4:	6823      	ldr	r3, [r4, #0]
 8003dc6:	4631      	mov	r1, r6
 8003dc8:	4638      	mov	r0, r7
 8003dca:	eb04 0903 	add.w	r9, r4, r3
 8003dce:	f000 fb5d 	bl	800448c <_sbrk_r>
 8003dd2:	4581      	cmp	r9, r0
 8003dd4:	d13f      	bne.n	8003e56 <_malloc_r+0xe6>
 8003dd6:	6821      	ldr	r1, [r4, #0]
 8003dd8:	1a6d      	subs	r5, r5, r1
 8003dda:	4629      	mov	r1, r5
 8003ddc:	4638      	mov	r0, r7
 8003dde:	f7ff ffa7 	bl	8003d30 <sbrk_aligned>
 8003de2:	3001      	adds	r0, #1
 8003de4:	d037      	beq.n	8003e56 <_malloc_r+0xe6>
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	442b      	add	r3, r5
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	f8d8 3000 	ldr.w	r3, [r8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d038      	beq.n	8003e66 <_malloc_r+0xf6>
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	42a2      	cmp	r2, r4
 8003df8:	d12b      	bne.n	8003e52 <_malloc_r+0xe2>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	e00f      	b.n	8003e20 <_malloc_r+0xb0>
 8003e00:	6822      	ldr	r2, [r4, #0]
 8003e02:	1b52      	subs	r2, r2, r5
 8003e04:	d41f      	bmi.n	8003e46 <_malloc_r+0xd6>
 8003e06:	2a0b      	cmp	r2, #11
 8003e08:	d917      	bls.n	8003e3a <_malloc_r+0xca>
 8003e0a:	1961      	adds	r1, r4, r5
 8003e0c:	42a3      	cmp	r3, r4
 8003e0e:	6025      	str	r5, [r4, #0]
 8003e10:	bf18      	it	ne
 8003e12:	6059      	strne	r1, [r3, #4]
 8003e14:	6863      	ldr	r3, [r4, #4]
 8003e16:	bf08      	it	eq
 8003e18:	f8c8 1000 	streq.w	r1, [r8]
 8003e1c:	5162      	str	r2, [r4, r5]
 8003e1e:	604b      	str	r3, [r1, #4]
 8003e20:	4638      	mov	r0, r7
 8003e22:	f104 060b 	add.w	r6, r4, #11
 8003e26:	f000 f829 	bl	8003e7c <__malloc_unlock>
 8003e2a:	f026 0607 	bic.w	r6, r6, #7
 8003e2e:	1d23      	adds	r3, r4, #4
 8003e30:	1af2      	subs	r2, r6, r3
 8003e32:	d0ae      	beq.n	8003d92 <_malloc_r+0x22>
 8003e34:	1b9b      	subs	r3, r3, r6
 8003e36:	50a3      	str	r3, [r4, r2]
 8003e38:	e7ab      	b.n	8003d92 <_malloc_r+0x22>
 8003e3a:	42a3      	cmp	r3, r4
 8003e3c:	6862      	ldr	r2, [r4, #4]
 8003e3e:	d1dd      	bne.n	8003dfc <_malloc_r+0x8c>
 8003e40:	f8c8 2000 	str.w	r2, [r8]
 8003e44:	e7ec      	b.n	8003e20 <_malloc_r+0xb0>
 8003e46:	4623      	mov	r3, r4
 8003e48:	6864      	ldr	r4, [r4, #4]
 8003e4a:	e7ac      	b.n	8003da6 <_malloc_r+0x36>
 8003e4c:	4634      	mov	r4, r6
 8003e4e:	6876      	ldr	r6, [r6, #4]
 8003e50:	e7b4      	b.n	8003dbc <_malloc_r+0x4c>
 8003e52:	4613      	mov	r3, r2
 8003e54:	e7cc      	b.n	8003df0 <_malloc_r+0x80>
 8003e56:	230c      	movs	r3, #12
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	4638      	mov	r0, r7
 8003e5c:	f000 f80e 	bl	8003e7c <__malloc_unlock>
 8003e60:	e797      	b.n	8003d92 <_malloc_r+0x22>
 8003e62:	6025      	str	r5, [r4, #0]
 8003e64:	e7dc      	b.n	8003e20 <_malloc_r+0xb0>
 8003e66:	605b      	str	r3, [r3, #4]
 8003e68:	deff      	udf	#255	; 0xff
 8003e6a:	bf00      	nop
 8003e6c:	20000304 	.word	0x20000304

08003e70 <__malloc_lock>:
 8003e70:	4801      	ldr	r0, [pc, #4]	; (8003e78 <__malloc_lock+0x8>)
 8003e72:	f7ff bf07 	b.w	8003c84 <__retarget_lock_acquire_recursive>
 8003e76:	bf00      	nop
 8003e78:	20000300 	.word	0x20000300

08003e7c <__malloc_unlock>:
 8003e7c:	4801      	ldr	r0, [pc, #4]	; (8003e84 <__malloc_unlock+0x8>)
 8003e7e:	f7ff bf02 	b.w	8003c86 <__retarget_lock_release_recursive>
 8003e82:	bf00      	nop
 8003e84:	20000300 	.word	0x20000300

08003e88 <__ssputs_r>:
 8003e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e8c:	688e      	ldr	r6, [r1, #8]
 8003e8e:	461f      	mov	r7, r3
 8003e90:	42be      	cmp	r6, r7
 8003e92:	680b      	ldr	r3, [r1, #0]
 8003e94:	4682      	mov	sl, r0
 8003e96:	460c      	mov	r4, r1
 8003e98:	4690      	mov	r8, r2
 8003e9a:	d82c      	bhi.n	8003ef6 <__ssputs_r+0x6e>
 8003e9c:	898a      	ldrh	r2, [r1, #12]
 8003e9e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ea2:	d026      	beq.n	8003ef2 <__ssputs_r+0x6a>
 8003ea4:	6965      	ldr	r5, [r4, #20]
 8003ea6:	6909      	ldr	r1, [r1, #16]
 8003ea8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003eac:	eba3 0901 	sub.w	r9, r3, r1
 8003eb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003eb4:	1c7b      	adds	r3, r7, #1
 8003eb6:	444b      	add	r3, r9
 8003eb8:	106d      	asrs	r5, r5, #1
 8003eba:	429d      	cmp	r5, r3
 8003ebc:	bf38      	it	cc
 8003ebe:	461d      	movcc	r5, r3
 8003ec0:	0553      	lsls	r3, r2, #21
 8003ec2:	d527      	bpl.n	8003f14 <__ssputs_r+0x8c>
 8003ec4:	4629      	mov	r1, r5
 8003ec6:	f7ff ff53 	bl	8003d70 <_malloc_r>
 8003eca:	4606      	mov	r6, r0
 8003ecc:	b360      	cbz	r0, 8003f28 <__ssputs_r+0xa0>
 8003ece:	6921      	ldr	r1, [r4, #16]
 8003ed0:	464a      	mov	r2, r9
 8003ed2:	f000 faeb 	bl	80044ac <memcpy>
 8003ed6:	89a3      	ldrh	r3, [r4, #12]
 8003ed8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee0:	81a3      	strh	r3, [r4, #12]
 8003ee2:	6126      	str	r6, [r4, #16]
 8003ee4:	6165      	str	r5, [r4, #20]
 8003ee6:	444e      	add	r6, r9
 8003ee8:	eba5 0509 	sub.w	r5, r5, r9
 8003eec:	6026      	str	r6, [r4, #0]
 8003eee:	60a5      	str	r5, [r4, #8]
 8003ef0:	463e      	mov	r6, r7
 8003ef2:	42be      	cmp	r6, r7
 8003ef4:	d900      	bls.n	8003ef8 <__ssputs_r+0x70>
 8003ef6:	463e      	mov	r6, r7
 8003ef8:	6820      	ldr	r0, [r4, #0]
 8003efa:	4632      	mov	r2, r6
 8003efc:	4641      	mov	r1, r8
 8003efe:	f000 faab 	bl	8004458 <memmove>
 8003f02:	68a3      	ldr	r3, [r4, #8]
 8003f04:	1b9b      	subs	r3, r3, r6
 8003f06:	60a3      	str	r3, [r4, #8]
 8003f08:	6823      	ldr	r3, [r4, #0]
 8003f0a:	4433      	add	r3, r6
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	2000      	movs	r0, #0
 8003f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f14:	462a      	mov	r2, r5
 8003f16:	f000 fad7 	bl	80044c8 <_realloc_r>
 8003f1a:	4606      	mov	r6, r0
 8003f1c:	2800      	cmp	r0, #0
 8003f1e:	d1e0      	bne.n	8003ee2 <__ssputs_r+0x5a>
 8003f20:	6921      	ldr	r1, [r4, #16]
 8003f22:	4650      	mov	r0, sl
 8003f24:	f7ff feb8 	bl	8003c98 <_free_r>
 8003f28:	230c      	movs	r3, #12
 8003f2a:	f8ca 3000 	str.w	r3, [sl]
 8003f2e:	89a3      	ldrh	r3, [r4, #12]
 8003f30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f34:	81a3      	strh	r3, [r4, #12]
 8003f36:	f04f 30ff 	mov.w	r0, #4294967295
 8003f3a:	e7e9      	b.n	8003f10 <__ssputs_r+0x88>

08003f3c <_svfiprintf_r>:
 8003f3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f40:	4698      	mov	r8, r3
 8003f42:	898b      	ldrh	r3, [r1, #12]
 8003f44:	061b      	lsls	r3, r3, #24
 8003f46:	b09d      	sub	sp, #116	; 0x74
 8003f48:	4607      	mov	r7, r0
 8003f4a:	460d      	mov	r5, r1
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	d50e      	bpl.n	8003f6e <_svfiprintf_r+0x32>
 8003f50:	690b      	ldr	r3, [r1, #16]
 8003f52:	b963      	cbnz	r3, 8003f6e <_svfiprintf_r+0x32>
 8003f54:	2140      	movs	r1, #64	; 0x40
 8003f56:	f7ff ff0b 	bl	8003d70 <_malloc_r>
 8003f5a:	6028      	str	r0, [r5, #0]
 8003f5c:	6128      	str	r0, [r5, #16]
 8003f5e:	b920      	cbnz	r0, 8003f6a <_svfiprintf_r+0x2e>
 8003f60:	230c      	movs	r3, #12
 8003f62:	603b      	str	r3, [r7, #0]
 8003f64:	f04f 30ff 	mov.w	r0, #4294967295
 8003f68:	e0d0      	b.n	800410c <_svfiprintf_r+0x1d0>
 8003f6a:	2340      	movs	r3, #64	; 0x40
 8003f6c:	616b      	str	r3, [r5, #20]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	9309      	str	r3, [sp, #36]	; 0x24
 8003f72:	2320      	movs	r3, #32
 8003f74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f78:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f7c:	2330      	movs	r3, #48	; 0x30
 8003f7e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004124 <_svfiprintf_r+0x1e8>
 8003f82:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f86:	f04f 0901 	mov.w	r9, #1
 8003f8a:	4623      	mov	r3, r4
 8003f8c:	469a      	mov	sl, r3
 8003f8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f92:	b10a      	cbz	r2, 8003f98 <_svfiprintf_r+0x5c>
 8003f94:	2a25      	cmp	r2, #37	; 0x25
 8003f96:	d1f9      	bne.n	8003f8c <_svfiprintf_r+0x50>
 8003f98:	ebba 0b04 	subs.w	fp, sl, r4
 8003f9c:	d00b      	beq.n	8003fb6 <_svfiprintf_r+0x7a>
 8003f9e:	465b      	mov	r3, fp
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	4629      	mov	r1, r5
 8003fa4:	4638      	mov	r0, r7
 8003fa6:	f7ff ff6f 	bl	8003e88 <__ssputs_r>
 8003faa:	3001      	adds	r0, #1
 8003fac:	f000 80a9 	beq.w	8004102 <_svfiprintf_r+0x1c6>
 8003fb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003fb2:	445a      	add	r2, fp
 8003fb4:	9209      	str	r2, [sp, #36]	; 0x24
 8003fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80a1 	beq.w	8004102 <_svfiprintf_r+0x1c6>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003fc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003fca:	f10a 0a01 	add.w	sl, sl, #1
 8003fce:	9304      	str	r3, [sp, #16]
 8003fd0:	9307      	str	r3, [sp, #28]
 8003fd2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003fd6:	931a      	str	r3, [sp, #104]	; 0x68
 8003fd8:	4654      	mov	r4, sl
 8003fda:	2205      	movs	r2, #5
 8003fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fe0:	4850      	ldr	r0, [pc, #320]	; (8004124 <_svfiprintf_r+0x1e8>)
 8003fe2:	f7fc f8fd 	bl	80001e0 <memchr>
 8003fe6:	9a04      	ldr	r2, [sp, #16]
 8003fe8:	b9d8      	cbnz	r0, 8004022 <_svfiprintf_r+0xe6>
 8003fea:	06d0      	lsls	r0, r2, #27
 8003fec:	bf44      	itt	mi
 8003fee:	2320      	movmi	r3, #32
 8003ff0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ff4:	0711      	lsls	r1, r2, #28
 8003ff6:	bf44      	itt	mi
 8003ff8:	232b      	movmi	r3, #43	; 0x2b
 8003ffa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ffe:	f89a 3000 	ldrb.w	r3, [sl]
 8004002:	2b2a      	cmp	r3, #42	; 0x2a
 8004004:	d015      	beq.n	8004032 <_svfiprintf_r+0xf6>
 8004006:	9a07      	ldr	r2, [sp, #28]
 8004008:	4654      	mov	r4, sl
 800400a:	2000      	movs	r0, #0
 800400c:	f04f 0c0a 	mov.w	ip, #10
 8004010:	4621      	mov	r1, r4
 8004012:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004016:	3b30      	subs	r3, #48	; 0x30
 8004018:	2b09      	cmp	r3, #9
 800401a:	d94d      	bls.n	80040b8 <_svfiprintf_r+0x17c>
 800401c:	b1b0      	cbz	r0, 800404c <_svfiprintf_r+0x110>
 800401e:	9207      	str	r2, [sp, #28]
 8004020:	e014      	b.n	800404c <_svfiprintf_r+0x110>
 8004022:	eba0 0308 	sub.w	r3, r0, r8
 8004026:	fa09 f303 	lsl.w	r3, r9, r3
 800402a:	4313      	orrs	r3, r2
 800402c:	9304      	str	r3, [sp, #16]
 800402e:	46a2      	mov	sl, r4
 8004030:	e7d2      	b.n	8003fd8 <_svfiprintf_r+0x9c>
 8004032:	9b03      	ldr	r3, [sp, #12]
 8004034:	1d19      	adds	r1, r3, #4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	9103      	str	r1, [sp, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	bfbb      	ittet	lt
 800403e:	425b      	neglt	r3, r3
 8004040:	f042 0202 	orrlt.w	r2, r2, #2
 8004044:	9307      	strge	r3, [sp, #28]
 8004046:	9307      	strlt	r3, [sp, #28]
 8004048:	bfb8      	it	lt
 800404a:	9204      	strlt	r2, [sp, #16]
 800404c:	7823      	ldrb	r3, [r4, #0]
 800404e:	2b2e      	cmp	r3, #46	; 0x2e
 8004050:	d10c      	bne.n	800406c <_svfiprintf_r+0x130>
 8004052:	7863      	ldrb	r3, [r4, #1]
 8004054:	2b2a      	cmp	r3, #42	; 0x2a
 8004056:	d134      	bne.n	80040c2 <_svfiprintf_r+0x186>
 8004058:	9b03      	ldr	r3, [sp, #12]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	9203      	str	r2, [sp, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	bfb8      	it	lt
 8004064:	f04f 33ff 	movlt.w	r3, #4294967295
 8004068:	3402      	adds	r4, #2
 800406a:	9305      	str	r3, [sp, #20]
 800406c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004134 <_svfiprintf_r+0x1f8>
 8004070:	7821      	ldrb	r1, [r4, #0]
 8004072:	2203      	movs	r2, #3
 8004074:	4650      	mov	r0, sl
 8004076:	f7fc f8b3 	bl	80001e0 <memchr>
 800407a:	b138      	cbz	r0, 800408c <_svfiprintf_r+0x150>
 800407c:	9b04      	ldr	r3, [sp, #16]
 800407e:	eba0 000a 	sub.w	r0, r0, sl
 8004082:	2240      	movs	r2, #64	; 0x40
 8004084:	4082      	lsls	r2, r0
 8004086:	4313      	orrs	r3, r2
 8004088:	3401      	adds	r4, #1
 800408a:	9304      	str	r3, [sp, #16]
 800408c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004090:	4825      	ldr	r0, [pc, #148]	; (8004128 <_svfiprintf_r+0x1ec>)
 8004092:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004096:	2206      	movs	r2, #6
 8004098:	f7fc f8a2 	bl	80001e0 <memchr>
 800409c:	2800      	cmp	r0, #0
 800409e:	d038      	beq.n	8004112 <_svfiprintf_r+0x1d6>
 80040a0:	4b22      	ldr	r3, [pc, #136]	; (800412c <_svfiprintf_r+0x1f0>)
 80040a2:	bb1b      	cbnz	r3, 80040ec <_svfiprintf_r+0x1b0>
 80040a4:	9b03      	ldr	r3, [sp, #12]
 80040a6:	3307      	adds	r3, #7
 80040a8:	f023 0307 	bic.w	r3, r3, #7
 80040ac:	3308      	adds	r3, #8
 80040ae:	9303      	str	r3, [sp, #12]
 80040b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b2:	4433      	add	r3, r6
 80040b4:	9309      	str	r3, [sp, #36]	; 0x24
 80040b6:	e768      	b.n	8003f8a <_svfiprintf_r+0x4e>
 80040b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80040bc:	460c      	mov	r4, r1
 80040be:	2001      	movs	r0, #1
 80040c0:	e7a6      	b.n	8004010 <_svfiprintf_r+0xd4>
 80040c2:	2300      	movs	r3, #0
 80040c4:	3401      	adds	r4, #1
 80040c6:	9305      	str	r3, [sp, #20]
 80040c8:	4619      	mov	r1, r3
 80040ca:	f04f 0c0a 	mov.w	ip, #10
 80040ce:	4620      	mov	r0, r4
 80040d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040d4:	3a30      	subs	r2, #48	; 0x30
 80040d6:	2a09      	cmp	r2, #9
 80040d8:	d903      	bls.n	80040e2 <_svfiprintf_r+0x1a6>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0c6      	beq.n	800406c <_svfiprintf_r+0x130>
 80040de:	9105      	str	r1, [sp, #20]
 80040e0:	e7c4      	b.n	800406c <_svfiprintf_r+0x130>
 80040e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80040e6:	4604      	mov	r4, r0
 80040e8:	2301      	movs	r3, #1
 80040ea:	e7f0      	b.n	80040ce <_svfiprintf_r+0x192>
 80040ec:	ab03      	add	r3, sp, #12
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	462a      	mov	r2, r5
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <_svfiprintf_r+0x1f4>)
 80040f4:	a904      	add	r1, sp, #16
 80040f6:	4638      	mov	r0, r7
 80040f8:	f3af 8000 	nop.w
 80040fc:	1c42      	adds	r2, r0, #1
 80040fe:	4606      	mov	r6, r0
 8004100:	d1d6      	bne.n	80040b0 <_svfiprintf_r+0x174>
 8004102:	89ab      	ldrh	r3, [r5, #12]
 8004104:	065b      	lsls	r3, r3, #25
 8004106:	f53f af2d 	bmi.w	8003f64 <_svfiprintf_r+0x28>
 800410a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800410c:	b01d      	add	sp, #116	; 0x74
 800410e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004112:	ab03      	add	r3, sp, #12
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	462a      	mov	r2, r5
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <_svfiprintf_r+0x1f4>)
 800411a:	a904      	add	r1, sp, #16
 800411c:	4638      	mov	r0, r7
 800411e:	f000 f879 	bl	8004214 <_printf_i>
 8004122:	e7eb      	b.n	80040fc <_svfiprintf_r+0x1c0>
 8004124:	0800464c 	.word	0x0800464c
 8004128:	08004656 	.word	0x08004656
 800412c:	00000000 	.word	0x00000000
 8004130:	08003e89 	.word	0x08003e89
 8004134:	08004652 	.word	0x08004652

08004138 <_printf_common>:
 8004138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800413c:	4616      	mov	r6, r2
 800413e:	4699      	mov	r9, r3
 8004140:	688a      	ldr	r2, [r1, #8]
 8004142:	690b      	ldr	r3, [r1, #16]
 8004144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004148:	4293      	cmp	r3, r2
 800414a:	bfb8      	it	lt
 800414c:	4613      	movlt	r3, r2
 800414e:	6033      	str	r3, [r6, #0]
 8004150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004154:	4607      	mov	r7, r0
 8004156:	460c      	mov	r4, r1
 8004158:	b10a      	cbz	r2, 800415e <_printf_common+0x26>
 800415a:	3301      	adds	r3, #1
 800415c:	6033      	str	r3, [r6, #0]
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	0699      	lsls	r1, r3, #26
 8004162:	bf42      	ittt	mi
 8004164:	6833      	ldrmi	r3, [r6, #0]
 8004166:	3302      	addmi	r3, #2
 8004168:	6033      	strmi	r3, [r6, #0]
 800416a:	6825      	ldr	r5, [r4, #0]
 800416c:	f015 0506 	ands.w	r5, r5, #6
 8004170:	d106      	bne.n	8004180 <_printf_common+0x48>
 8004172:	f104 0a19 	add.w	sl, r4, #25
 8004176:	68e3      	ldr	r3, [r4, #12]
 8004178:	6832      	ldr	r2, [r6, #0]
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	42ab      	cmp	r3, r5
 800417e:	dc26      	bgt.n	80041ce <_printf_common+0x96>
 8004180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004184:	1e13      	subs	r3, r2, #0
 8004186:	6822      	ldr	r2, [r4, #0]
 8004188:	bf18      	it	ne
 800418a:	2301      	movne	r3, #1
 800418c:	0692      	lsls	r2, r2, #26
 800418e:	d42b      	bmi.n	80041e8 <_printf_common+0xb0>
 8004190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004194:	4649      	mov	r1, r9
 8004196:	4638      	mov	r0, r7
 8004198:	47c0      	blx	r8
 800419a:	3001      	adds	r0, #1
 800419c:	d01e      	beq.n	80041dc <_printf_common+0xa4>
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	6922      	ldr	r2, [r4, #16]
 80041a2:	f003 0306 	and.w	r3, r3, #6
 80041a6:	2b04      	cmp	r3, #4
 80041a8:	bf02      	ittt	eq
 80041aa:	68e5      	ldreq	r5, [r4, #12]
 80041ac:	6833      	ldreq	r3, [r6, #0]
 80041ae:	1aed      	subeq	r5, r5, r3
 80041b0:	68a3      	ldr	r3, [r4, #8]
 80041b2:	bf0c      	ite	eq
 80041b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80041b8:	2500      	movne	r5, #0
 80041ba:	4293      	cmp	r3, r2
 80041bc:	bfc4      	itt	gt
 80041be:	1a9b      	subgt	r3, r3, r2
 80041c0:	18ed      	addgt	r5, r5, r3
 80041c2:	2600      	movs	r6, #0
 80041c4:	341a      	adds	r4, #26
 80041c6:	42b5      	cmp	r5, r6
 80041c8:	d11a      	bne.n	8004200 <_printf_common+0xc8>
 80041ca:	2000      	movs	r0, #0
 80041cc:	e008      	b.n	80041e0 <_printf_common+0xa8>
 80041ce:	2301      	movs	r3, #1
 80041d0:	4652      	mov	r2, sl
 80041d2:	4649      	mov	r1, r9
 80041d4:	4638      	mov	r0, r7
 80041d6:	47c0      	blx	r8
 80041d8:	3001      	adds	r0, #1
 80041da:	d103      	bne.n	80041e4 <_printf_common+0xac>
 80041dc:	f04f 30ff 	mov.w	r0, #4294967295
 80041e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041e4:	3501      	adds	r5, #1
 80041e6:	e7c6      	b.n	8004176 <_printf_common+0x3e>
 80041e8:	18e1      	adds	r1, r4, r3
 80041ea:	1c5a      	adds	r2, r3, #1
 80041ec:	2030      	movs	r0, #48	; 0x30
 80041ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80041f2:	4422      	add	r2, r4
 80041f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80041f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80041fc:	3302      	adds	r3, #2
 80041fe:	e7c7      	b.n	8004190 <_printf_common+0x58>
 8004200:	2301      	movs	r3, #1
 8004202:	4622      	mov	r2, r4
 8004204:	4649      	mov	r1, r9
 8004206:	4638      	mov	r0, r7
 8004208:	47c0      	blx	r8
 800420a:	3001      	adds	r0, #1
 800420c:	d0e6      	beq.n	80041dc <_printf_common+0xa4>
 800420e:	3601      	adds	r6, #1
 8004210:	e7d9      	b.n	80041c6 <_printf_common+0x8e>
	...

08004214 <_printf_i>:
 8004214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004218:	7e0f      	ldrb	r7, [r1, #24]
 800421a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800421c:	2f78      	cmp	r7, #120	; 0x78
 800421e:	4691      	mov	r9, r2
 8004220:	4680      	mov	r8, r0
 8004222:	460c      	mov	r4, r1
 8004224:	469a      	mov	sl, r3
 8004226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800422a:	d807      	bhi.n	800423c <_printf_i+0x28>
 800422c:	2f62      	cmp	r7, #98	; 0x62
 800422e:	d80a      	bhi.n	8004246 <_printf_i+0x32>
 8004230:	2f00      	cmp	r7, #0
 8004232:	f000 80d4 	beq.w	80043de <_printf_i+0x1ca>
 8004236:	2f58      	cmp	r7, #88	; 0x58
 8004238:	f000 80c0 	beq.w	80043bc <_printf_i+0x1a8>
 800423c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004244:	e03a      	b.n	80042bc <_printf_i+0xa8>
 8004246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800424a:	2b15      	cmp	r3, #21
 800424c:	d8f6      	bhi.n	800423c <_printf_i+0x28>
 800424e:	a101      	add	r1, pc, #4	; (adr r1, 8004254 <_printf_i+0x40>)
 8004250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004254:	080042ad 	.word	0x080042ad
 8004258:	080042c1 	.word	0x080042c1
 800425c:	0800423d 	.word	0x0800423d
 8004260:	0800423d 	.word	0x0800423d
 8004264:	0800423d 	.word	0x0800423d
 8004268:	0800423d 	.word	0x0800423d
 800426c:	080042c1 	.word	0x080042c1
 8004270:	0800423d 	.word	0x0800423d
 8004274:	0800423d 	.word	0x0800423d
 8004278:	0800423d 	.word	0x0800423d
 800427c:	0800423d 	.word	0x0800423d
 8004280:	080043c5 	.word	0x080043c5
 8004284:	080042ed 	.word	0x080042ed
 8004288:	0800437f 	.word	0x0800437f
 800428c:	0800423d 	.word	0x0800423d
 8004290:	0800423d 	.word	0x0800423d
 8004294:	080043e7 	.word	0x080043e7
 8004298:	0800423d 	.word	0x0800423d
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	0800423d 	.word	0x0800423d
 80042a4:	0800423d 	.word	0x0800423d
 80042a8:	08004387 	.word	0x08004387
 80042ac:	682b      	ldr	r3, [r5, #0]
 80042ae:	1d1a      	adds	r2, r3, #4
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	602a      	str	r2, [r5, #0]
 80042b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80042b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80042bc:	2301      	movs	r3, #1
 80042be:	e09f      	b.n	8004400 <_printf_i+0x1ec>
 80042c0:	6820      	ldr	r0, [r4, #0]
 80042c2:	682b      	ldr	r3, [r5, #0]
 80042c4:	0607      	lsls	r7, r0, #24
 80042c6:	f103 0104 	add.w	r1, r3, #4
 80042ca:	6029      	str	r1, [r5, #0]
 80042cc:	d501      	bpl.n	80042d2 <_printf_i+0xbe>
 80042ce:	681e      	ldr	r6, [r3, #0]
 80042d0:	e003      	b.n	80042da <_printf_i+0xc6>
 80042d2:	0646      	lsls	r6, r0, #25
 80042d4:	d5fb      	bpl.n	80042ce <_printf_i+0xba>
 80042d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80042da:	2e00      	cmp	r6, #0
 80042dc:	da03      	bge.n	80042e6 <_printf_i+0xd2>
 80042de:	232d      	movs	r3, #45	; 0x2d
 80042e0:	4276      	negs	r6, r6
 80042e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042e6:	485a      	ldr	r0, [pc, #360]	; (8004450 <_printf_i+0x23c>)
 80042e8:	230a      	movs	r3, #10
 80042ea:	e012      	b.n	8004312 <_printf_i+0xfe>
 80042ec:	682b      	ldr	r3, [r5, #0]
 80042ee:	6820      	ldr	r0, [r4, #0]
 80042f0:	1d19      	adds	r1, r3, #4
 80042f2:	6029      	str	r1, [r5, #0]
 80042f4:	0605      	lsls	r5, r0, #24
 80042f6:	d501      	bpl.n	80042fc <_printf_i+0xe8>
 80042f8:	681e      	ldr	r6, [r3, #0]
 80042fa:	e002      	b.n	8004302 <_printf_i+0xee>
 80042fc:	0641      	lsls	r1, r0, #25
 80042fe:	d5fb      	bpl.n	80042f8 <_printf_i+0xe4>
 8004300:	881e      	ldrh	r6, [r3, #0]
 8004302:	4853      	ldr	r0, [pc, #332]	; (8004450 <_printf_i+0x23c>)
 8004304:	2f6f      	cmp	r7, #111	; 0x6f
 8004306:	bf0c      	ite	eq
 8004308:	2308      	moveq	r3, #8
 800430a:	230a      	movne	r3, #10
 800430c:	2100      	movs	r1, #0
 800430e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004312:	6865      	ldr	r5, [r4, #4]
 8004314:	60a5      	str	r5, [r4, #8]
 8004316:	2d00      	cmp	r5, #0
 8004318:	bfa2      	ittt	ge
 800431a:	6821      	ldrge	r1, [r4, #0]
 800431c:	f021 0104 	bicge.w	r1, r1, #4
 8004320:	6021      	strge	r1, [r4, #0]
 8004322:	b90e      	cbnz	r6, 8004328 <_printf_i+0x114>
 8004324:	2d00      	cmp	r5, #0
 8004326:	d04b      	beq.n	80043c0 <_printf_i+0x1ac>
 8004328:	4615      	mov	r5, r2
 800432a:	fbb6 f1f3 	udiv	r1, r6, r3
 800432e:	fb03 6711 	mls	r7, r3, r1, r6
 8004332:	5dc7      	ldrb	r7, [r0, r7]
 8004334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004338:	4637      	mov	r7, r6
 800433a:	42bb      	cmp	r3, r7
 800433c:	460e      	mov	r6, r1
 800433e:	d9f4      	bls.n	800432a <_printf_i+0x116>
 8004340:	2b08      	cmp	r3, #8
 8004342:	d10b      	bne.n	800435c <_printf_i+0x148>
 8004344:	6823      	ldr	r3, [r4, #0]
 8004346:	07de      	lsls	r6, r3, #31
 8004348:	d508      	bpl.n	800435c <_printf_i+0x148>
 800434a:	6923      	ldr	r3, [r4, #16]
 800434c:	6861      	ldr	r1, [r4, #4]
 800434e:	4299      	cmp	r1, r3
 8004350:	bfde      	ittt	le
 8004352:	2330      	movle	r3, #48	; 0x30
 8004354:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800435c:	1b52      	subs	r2, r2, r5
 800435e:	6122      	str	r2, [r4, #16]
 8004360:	f8cd a000 	str.w	sl, [sp]
 8004364:	464b      	mov	r3, r9
 8004366:	aa03      	add	r2, sp, #12
 8004368:	4621      	mov	r1, r4
 800436a:	4640      	mov	r0, r8
 800436c:	f7ff fee4 	bl	8004138 <_printf_common>
 8004370:	3001      	adds	r0, #1
 8004372:	d14a      	bne.n	800440a <_printf_i+0x1f6>
 8004374:	f04f 30ff 	mov.w	r0, #4294967295
 8004378:	b004      	add	sp, #16
 800437a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800437e:	6823      	ldr	r3, [r4, #0]
 8004380:	f043 0320 	orr.w	r3, r3, #32
 8004384:	6023      	str	r3, [r4, #0]
 8004386:	4833      	ldr	r0, [pc, #204]	; (8004454 <_printf_i+0x240>)
 8004388:	2778      	movs	r7, #120	; 0x78
 800438a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	6829      	ldr	r1, [r5, #0]
 8004392:	061f      	lsls	r7, r3, #24
 8004394:	f851 6b04 	ldr.w	r6, [r1], #4
 8004398:	d402      	bmi.n	80043a0 <_printf_i+0x18c>
 800439a:	065f      	lsls	r7, r3, #25
 800439c:	bf48      	it	mi
 800439e:	b2b6      	uxthmi	r6, r6
 80043a0:	07df      	lsls	r7, r3, #31
 80043a2:	bf48      	it	mi
 80043a4:	f043 0320 	orrmi.w	r3, r3, #32
 80043a8:	6029      	str	r1, [r5, #0]
 80043aa:	bf48      	it	mi
 80043ac:	6023      	strmi	r3, [r4, #0]
 80043ae:	b91e      	cbnz	r6, 80043b8 <_printf_i+0x1a4>
 80043b0:	6823      	ldr	r3, [r4, #0]
 80043b2:	f023 0320 	bic.w	r3, r3, #32
 80043b6:	6023      	str	r3, [r4, #0]
 80043b8:	2310      	movs	r3, #16
 80043ba:	e7a7      	b.n	800430c <_printf_i+0xf8>
 80043bc:	4824      	ldr	r0, [pc, #144]	; (8004450 <_printf_i+0x23c>)
 80043be:	e7e4      	b.n	800438a <_printf_i+0x176>
 80043c0:	4615      	mov	r5, r2
 80043c2:	e7bd      	b.n	8004340 <_printf_i+0x12c>
 80043c4:	682b      	ldr	r3, [r5, #0]
 80043c6:	6826      	ldr	r6, [r4, #0]
 80043c8:	6961      	ldr	r1, [r4, #20]
 80043ca:	1d18      	adds	r0, r3, #4
 80043cc:	6028      	str	r0, [r5, #0]
 80043ce:	0635      	lsls	r5, r6, #24
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	d501      	bpl.n	80043d8 <_printf_i+0x1c4>
 80043d4:	6019      	str	r1, [r3, #0]
 80043d6:	e002      	b.n	80043de <_printf_i+0x1ca>
 80043d8:	0670      	lsls	r0, r6, #25
 80043da:	d5fb      	bpl.n	80043d4 <_printf_i+0x1c0>
 80043dc:	8019      	strh	r1, [r3, #0]
 80043de:	2300      	movs	r3, #0
 80043e0:	6123      	str	r3, [r4, #16]
 80043e2:	4615      	mov	r5, r2
 80043e4:	e7bc      	b.n	8004360 <_printf_i+0x14c>
 80043e6:	682b      	ldr	r3, [r5, #0]
 80043e8:	1d1a      	adds	r2, r3, #4
 80043ea:	602a      	str	r2, [r5, #0]
 80043ec:	681d      	ldr	r5, [r3, #0]
 80043ee:	6862      	ldr	r2, [r4, #4]
 80043f0:	2100      	movs	r1, #0
 80043f2:	4628      	mov	r0, r5
 80043f4:	f7fb fef4 	bl	80001e0 <memchr>
 80043f8:	b108      	cbz	r0, 80043fe <_printf_i+0x1ea>
 80043fa:	1b40      	subs	r0, r0, r5
 80043fc:	6060      	str	r0, [r4, #4]
 80043fe:	6863      	ldr	r3, [r4, #4]
 8004400:	6123      	str	r3, [r4, #16]
 8004402:	2300      	movs	r3, #0
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004408:	e7aa      	b.n	8004360 <_printf_i+0x14c>
 800440a:	6923      	ldr	r3, [r4, #16]
 800440c:	462a      	mov	r2, r5
 800440e:	4649      	mov	r1, r9
 8004410:	4640      	mov	r0, r8
 8004412:	47d0      	blx	sl
 8004414:	3001      	adds	r0, #1
 8004416:	d0ad      	beq.n	8004374 <_printf_i+0x160>
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	079b      	lsls	r3, r3, #30
 800441c:	d413      	bmi.n	8004446 <_printf_i+0x232>
 800441e:	68e0      	ldr	r0, [r4, #12]
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	4298      	cmp	r0, r3
 8004424:	bfb8      	it	lt
 8004426:	4618      	movlt	r0, r3
 8004428:	e7a6      	b.n	8004378 <_printf_i+0x164>
 800442a:	2301      	movs	r3, #1
 800442c:	4632      	mov	r2, r6
 800442e:	4649      	mov	r1, r9
 8004430:	4640      	mov	r0, r8
 8004432:	47d0      	blx	sl
 8004434:	3001      	adds	r0, #1
 8004436:	d09d      	beq.n	8004374 <_printf_i+0x160>
 8004438:	3501      	adds	r5, #1
 800443a:	68e3      	ldr	r3, [r4, #12]
 800443c:	9903      	ldr	r1, [sp, #12]
 800443e:	1a5b      	subs	r3, r3, r1
 8004440:	42ab      	cmp	r3, r5
 8004442:	dcf2      	bgt.n	800442a <_printf_i+0x216>
 8004444:	e7eb      	b.n	800441e <_printf_i+0x20a>
 8004446:	2500      	movs	r5, #0
 8004448:	f104 0619 	add.w	r6, r4, #25
 800444c:	e7f5      	b.n	800443a <_printf_i+0x226>
 800444e:	bf00      	nop
 8004450:	0800465d 	.word	0x0800465d
 8004454:	0800466e 	.word	0x0800466e

08004458 <memmove>:
 8004458:	4288      	cmp	r0, r1
 800445a:	b510      	push	{r4, lr}
 800445c:	eb01 0402 	add.w	r4, r1, r2
 8004460:	d902      	bls.n	8004468 <memmove+0x10>
 8004462:	4284      	cmp	r4, r0
 8004464:	4623      	mov	r3, r4
 8004466:	d807      	bhi.n	8004478 <memmove+0x20>
 8004468:	1e43      	subs	r3, r0, #1
 800446a:	42a1      	cmp	r1, r4
 800446c:	d008      	beq.n	8004480 <memmove+0x28>
 800446e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004472:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004476:	e7f8      	b.n	800446a <memmove+0x12>
 8004478:	4402      	add	r2, r0
 800447a:	4601      	mov	r1, r0
 800447c:	428a      	cmp	r2, r1
 800447e:	d100      	bne.n	8004482 <memmove+0x2a>
 8004480:	bd10      	pop	{r4, pc}
 8004482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800448a:	e7f7      	b.n	800447c <memmove+0x24>

0800448c <_sbrk_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d06      	ldr	r5, [pc, #24]	; (80044a8 <_sbrk_r+0x1c>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	602b      	str	r3, [r5, #0]
 8004498:	f7fd fb68 	bl	8001b6c <_sbrk>
 800449c:	1c43      	adds	r3, r0, #1
 800449e:	d102      	bne.n	80044a6 <_sbrk_r+0x1a>
 80044a0:	682b      	ldr	r3, [r5, #0]
 80044a2:	b103      	cbz	r3, 80044a6 <_sbrk_r+0x1a>
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	bd38      	pop	{r3, r4, r5, pc}
 80044a8:	200002fc 	.word	0x200002fc

080044ac <memcpy>:
 80044ac:	440a      	add	r2, r1
 80044ae:	4291      	cmp	r1, r2
 80044b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80044b4:	d100      	bne.n	80044b8 <memcpy+0xc>
 80044b6:	4770      	bx	lr
 80044b8:	b510      	push	{r4, lr}
 80044ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80044c2:	4291      	cmp	r1, r2
 80044c4:	d1f9      	bne.n	80044ba <memcpy+0xe>
 80044c6:	bd10      	pop	{r4, pc}

080044c8 <_realloc_r>:
 80044c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044cc:	4680      	mov	r8, r0
 80044ce:	4614      	mov	r4, r2
 80044d0:	460e      	mov	r6, r1
 80044d2:	b921      	cbnz	r1, 80044de <_realloc_r+0x16>
 80044d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044d8:	4611      	mov	r1, r2
 80044da:	f7ff bc49 	b.w	8003d70 <_malloc_r>
 80044de:	b92a      	cbnz	r2, 80044ec <_realloc_r+0x24>
 80044e0:	f7ff fbda 	bl	8003c98 <_free_r>
 80044e4:	4625      	mov	r5, r4
 80044e6:	4628      	mov	r0, r5
 80044e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ec:	f000 f81b 	bl	8004526 <_malloc_usable_size_r>
 80044f0:	4284      	cmp	r4, r0
 80044f2:	4607      	mov	r7, r0
 80044f4:	d802      	bhi.n	80044fc <_realloc_r+0x34>
 80044f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80044fa:	d812      	bhi.n	8004522 <_realloc_r+0x5a>
 80044fc:	4621      	mov	r1, r4
 80044fe:	4640      	mov	r0, r8
 8004500:	f7ff fc36 	bl	8003d70 <_malloc_r>
 8004504:	4605      	mov	r5, r0
 8004506:	2800      	cmp	r0, #0
 8004508:	d0ed      	beq.n	80044e6 <_realloc_r+0x1e>
 800450a:	42bc      	cmp	r4, r7
 800450c:	4622      	mov	r2, r4
 800450e:	4631      	mov	r1, r6
 8004510:	bf28      	it	cs
 8004512:	463a      	movcs	r2, r7
 8004514:	f7ff ffca 	bl	80044ac <memcpy>
 8004518:	4631      	mov	r1, r6
 800451a:	4640      	mov	r0, r8
 800451c:	f7ff fbbc 	bl	8003c98 <_free_r>
 8004520:	e7e1      	b.n	80044e6 <_realloc_r+0x1e>
 8004522:	4635      	mov	r5, r6
 8004524:	e7df      	b.n	80044e6 <_realloc_r+0x1e>

08004526 <_malloc_usable_size_r>:
 8004526:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800452a:	1f18      	subs	r0, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	bfbc      	itt	lt
 8004530:	580b      	ldrlt	r3, [r1, r0]
 8004532:	18c0      	addlt	r0, r0, r3
 8004534:	4770      	bx	lr
	...

08004538 <_init>:
 8004538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453a:	bf00      	nop
 800453c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800453e:	bc08      	pop	{r3}
 8004540:	469e      	mov	lr, r3
 8004542:	4770      	bx	lr

08004544 <_fini>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr
